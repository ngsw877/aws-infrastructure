AWSTemplateFormatVersion: 2010-09-09
Description: TGW hands-on lab2 template

## aws cloudformation create-stack --template-body file://static/CFn/wstgw-lab2.template --capabilities CAPABILITY_NAMED_IAM --stack-name tgw-hands-on-lab1

Parameters:
  wstgwPrivateVpc2Cidr:
    Type: String
    Default: 10.1.0.0/16
  wstgwEc2Ami:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
#    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  wstgwEc2InstanceType:
    Type: String
    Default : t3.micro

Resources:
  ## Create IAM
  wstgwEc2IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  wstgwEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref wstgwEc2IAMRole

  ## Create PrivateVpc2
  #### Create VPC
  wstgwPrivateVpc2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${wstgwPrivateVpc2Cidr}
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: wstgwPrivateVpc2

  #### create Subnet
  wstgwPrivateVpc2PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt wstgwPrivateVpc2.CidrBlock, 11, 8 ]]
      VpcId: !Ref wstgwPrivateVpc2
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: wstgwPrivateVpc2PrivateSubnet

  wstgwPrivateVpc2TgwSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 10, !Cidr [ !GetAtt wstgwPrivateVpc2.CidrBlock, 11, 8 ]]
      VpcId: !Ref wstgwPrivateVpc2
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: wstgwPrivateVpc2TgwSubnet

  #### Route Table
  wstgwRtbPrivateVpc2PrivateSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref wstgwPrivateVpc2
      Tags:
        - Key: Name
          Value: wstgwRtbPrivateVpc2PrivateSubnet

  #### Create route
  ###### Associsate PrivateSubnet
  wstgwRtbAssoPrivateVpc2PrivateSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref wstgwPrivateVpc2PrivateSubnet
      RouteTableId: !Ref wstgwRtbPrivateVpc2PrivateSubnet

  #### Create Endpoint
  wstgwSGSsmEndPoint2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: wstgwSgSsmEndPoint2
      GroupDescription: "for SSM Endpoint"
      VpcId: !Ref wstgwPrivateVpc2
      SecurityGroupIngress:
        - Description: "Allow SSM Endpoint from Internal"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub ${wstgwPrivateVpc2Cidr}
      Tags:
        - Key: Name
          Value: wstgwSGSsmEndPoint2

  wstgwSsmEndpoint2:
    DependsOn: wstgwEc2Instance10x1x1x100
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref wstgwPrivateVpc2
      SubnetIds:
        - !Ref wstgwPrivateVpc2PrivateSubnet
      SecurityGroupIds:
        - !Ref wstgwSGSsmEndPoint2

  wstgwSsmMessagesEndpoint2:
    DependsOn: wstgwEc2Instance10x1x1x100
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref wstgwPrivateVpc2
      SubnetIds:
        - !Ref wstgwPrivateVpc2PrivateSubnet
      SecurityGroupIds:
        - !Ref wstgwSGSsmEndPoint2

  #### Create Instace
  wstgwSGEc2Instance2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: wstgwSGEc2Instance2
      GroupDescription: "for EC2 instance"
      VpcId: !Ref wstgwPrivateVpc2
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: "10.0.0.0/8"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: "192.168.0.0/16"
      Tags:
        - Key: Name
          Value: wstgwSGEc2Instance2

  wstgwEc2Instance10x1x1x100: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref wstgwEc2Ami
#      KeyName: !Ref wstgwKeyName
      InstanceType: !Ref wstgwEc2InstanceType
      IamInstanceProfile: !Ref wstgwEc2InstanceProfile
      NetworkInterfaces: 
        - DeviceIndex: "0"
          SubnetId: !Ref wstgwPrivateVpc2PrivateSubnet
          GroupSet:
            - !Ref wstgwSGEc2Instance2
          PrivateIpAddresses:
            - PrivateIpAddress: "10.1.1.100"
              Primary: true
      Tags:
          - Key: Name
            Value: wstgwEc2Instance10-1-1-100

Outputs:

  wstgwPrivateVpc2:
    Description: PrivateVpc2
    Value: !Ref wstgwPrivateVpc2
    Export:
      Name: wstgwPrivateVpc2

  wstgwEc2Instance10x1x1x100:
    Description: wstgwEc2Instance10-1-1-100
    Value: !Ref wstgwEc2Instance10x1x1x100
    Export:
      Name: wstgwEc2Instance10-1-1-100

