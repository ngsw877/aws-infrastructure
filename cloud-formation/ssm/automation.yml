AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  TargetInstanceId:
    Type: String
    Description: 'EC2„Ç§„É≥„Çπ„Çø„É≥„ÇπID'
  SlackWebhookUrlParameterName:
    Type: String
    Description: "Slack Webhook URL„Åå‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã„Éë„É©„É°„Éº„Çø„Çπ„Éà„Ç¢„ÅÆ„Éë„É©„É°„Éº„ÇøÂêç"
    Default: "/scheduled-batch/slack-webhook-url"

Resources:
  EC2StopAutomation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        description: 'Stop EC2 instances'
        schemaVersion: '0.3'
        parameters:
          InstanceIds:
            type: StringList
            description: 'List of EC2 instance IDs to stop'
        mainSteps:
          - name: stopEC2Instances
            action: 'aws:changeInstanceState'
            inputs:
              InstanceIds: '{{InstanceIds}}'
              DesiredState: stopped

  SSMAutomationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Detect SSM Automation execution status changes"
      EventPattern:
        source:
          - "aws.ssm"
        detail-type:
          - "EC2 Automation Step Status-change Notification"
        detail:
          AutomationExecutionId:
            - !Ref EC2StopAutomation
          Status:
            - "Success"
            - "Failed"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SlackNotificationLambda.Arn
          Id: "SlackNotificationTarget"

  SlackNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import urllib.request
          import os
          import boto3

          def format_status(status):
              if status == "Success":
                  return "ÊàêÂäü ‚úÖ"
              elif status == "Failed":
                  return "Â§±Êïó ‚ùå"
              else:
                  return f"{status} ‚ùì"

          def handler(event, context):
              status = event['detail']['Status']
              execution_id = event['detail']['AutomationExecutionId']
              resources = event['resources']
              step_name = event['detail']['StepName']
              action = event['detail']['Action']
          
              # „É™„ÇΩ„Éº„ÇπÂêç„ÇíÊäΩÂá∫ÔºàARN„ÅÆÊúÄÂæå„ÅÆÈÉ®ÂàÜ„Çí‰ΩøÁî®Ôºâ
              resource_name = resources[0].split('/')[-1] if resources else "‰∏çÊòé"

              message = (
                  f"üîî *SSM„Ç™„Éº„Éà„É°„Éº„Ç∑„Éß„É≥ÂÆüË°åÁµêÊûú*\n\n"
                  f"*„Çπ„ÉÜ„Éº„Çø„Çπ*: {format_status(status)}\n"
                  f"*ÂÆüË°åÂÜÖÂÆπ*: {step_name} ({action})\n"
                  f"*ÂØæË±°„É™„ÇΩ„Éº„Çπ*: `{resource_name}`\n"
                  f"*ÂÆüË°åID*: `{execution_id}`\n\n"
                  f"Ë©≥Á¥∞„ÅØAWS Systems Manager„Ç≥„É≥„ÇΩ„Éº„É´„Åß„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ"
              )

              data = {
                  "text": message
              }
          
              ssm = boto3.client('ssm')
              parameter_name = os.environ['SLACK_WEBHOOK_URL_PARAMETER_NAME']
              parameter = ssm.get_parameter(Name=parameter_name, WithDecryption=True)
              slack_webhook_url = parameter['Parameter']['Value']
          
              req = urllib.request.Request(slack_webhook_url, 
              data=json.dumps(data).encode('utf-8'), 
              headers={'Content-Type': 'application/json'})
          
              response = urllib.request.urlopen(req)
              return {
                  'statusCode': response.getcode(),
                  'body': response.read().decode('utf-8')
              }
      Runtime: python3.8
      Timeout: 10
      Environment:
        Variables:
          SLACK_WEBHOOK_URL_PARAMETER_NAME: !Ref SlackWebhookUrlParameterName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SlackWebhookUrlParameterName}'

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SlackNotificationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SSMAutomationEventRule.Arn

  AutomationScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule for running SSM Automation to stop EC2 instances"
      ScheduleExpression: "rate(1 day)"
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EC2StopAutomation}'
          Id: "TargetSSMAutomation"
          RoleArn: !GetAtt AutomationExecutionRole.Arn
          Input: !Sub '{"InstanceIds": ["${TargetInstanceId}"]}'

  AutomationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSSMAutomation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ec2:StopInstances
                  - ec2:DescribeInstances
                Resource: '*'
