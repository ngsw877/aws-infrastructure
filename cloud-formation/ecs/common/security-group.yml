AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VpcStackName:
    Type: String
    Default: "common-vpc"
  TestListenerPort:
    Type: Number
    Default: 4430

Resources:
  # 全トラフィック許可のセキュリティグループ
  AllTrafficAllowedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for all traffic"
      GroupName: !Sub "${AWS::StackName}-all-traffic-sg"
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"

  # インターネット公開のALB用セキュリティグループ
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      GroupName: !Sub "${AWS::StackName}-alb-sg"
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  LoadBalancerSecurityGroupHttpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow HTTP traffic"
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80
      CidrIp: "0.0.0.0/0"

  LoadBalancerSecurityGroupHttpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow HTTPS traffic"
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443
      CidrIp: "0.0.0.0/0"

  LoadBalancerSecurityGroupHttpsForTestIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow HTTPS traffic"
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: "tcp"
      FromPort: !Ref TestListenerPort
      ToPort: !Ref TestListenerPort
      CidrIp: "0.0.0.0/0"

  LoadBalancerSecurityGroupEgressAll:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Allow all outbound traffic"
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: -1
      CidrIp: "0.0.0.0/0"

  # コンテナアプリ用セキュリティグループ
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow Access From LoadBalancer to WebApp Service"
      GroupName: !Sub "${AWS::StackName}-webapp-sg"
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  # Internet ALB -> WebApp Container
  WebAppSecurityGroupIngressFromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow HTTP traffic from LoadBalancer to WebApp"
      GroupId: !Ref WebAppSecurityGroup
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  WebAppSecurityGroupEgressAllTraffic:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Allow all outbound traffic by default"
      GroupId: !Ref WebAppSecurityGroup
      IpProtocol: -1
      CidrIp: "0.0.0.0/0"

Outputs:
    AllTrafficAllowedSecurityGroup:
        Description: Common Security Group for All Traffic
        Value: !Ref AllTrafficAllowedSecurityGroup
        Export:
          Name: !Sub "${AWS::StackName}-AllTrafficAllowedSecurityGroup"
    LoadBalancerSecurityGroup:
        Description: Common Security Group for ALB
        Value: !Ref LoadBalancerSecurityGroup
        Export:
          Name: !Sub "${AWS::StackName}-LoadBalancerSecurityGroup"
    TestListenerPort:
        Description: Test LoadBalancer Listener Port
        Value: !Ref TestListenerPort
        Export:
          Name: !Sub "${AWS::StackName}-TestListenerPort"
    WebAppSecurityGroup:
        Description: Common Security Group for WebApp Container
        Value: !Ref WebAppSecurityGroup
        Export:
          Name: !Sub "${AWS::StackName}-WebAppSecurityGroup"
