AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcStackName:
    Type: String
  
  EnableReadReplica:
    Type: String
    AllowedValues:
    - "true"
    - "false"
    Default: "false"

  ### AWS::RDS::DBInstance ###
  Engine:
    Type: String
    Default: "postgres"

  EngineVersion:
    Type: String

  RdsPort:
    Type: String
    Default: "5432"

  PrimaryRdsInstanceClass:
    Type: String

  ReplicaRdsInstanceClass:
    Type: String

  EnableMultiAZ:
    Type: String
    AllowedValues:
    - "true"
    - "false"
    Default: "false"
  
  StorageType:
    Type: String
    Default: "gp3"

  AllocatedStorage:
    Type: String

  MaxAllocatedStorage:
    Type: String

  ### AWS::RDS::DBParameterGroup ###
  RdsParameterGroupFamily:
    Type: String
    Default: "postgres13"

  RdsLogStatement:
    Type: String
    Default: "none"

  ### RDSカスタムドメイン ###
  HostedZoneId:
    Type: String

  PrimaryRdsCustomDomainName:
    Type: String

  ReplicaRdsCustomDomainName:
    Type: String
  
  ### AWS::SecretsManager::Secret ###
  DbMasterUserName:
    Type: String

Outputs:
  DatabaseHostName:
    Value: !Ref PrimaryRdsCustomDomainRecord
    Export:
      Name: !Sub "${AWS::StackName}-PrimaryRdsCustomDomainName"

  DbMasterUserSecret:
    Value: !Ref DbMasterUserSecret
    Export:
      Name: !Sub "${AWS::StackName}-DbMasterUserSecret"

Conditions:
  EnableReadReplica:
    Fn::Equals: [ !Ref EnableReadReplica, "true" ]

Resources:
  RdsMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "monitoring.rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  PrimaryRdsParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: !Ref RdsParameterGroupFamily
      Description: !Sub "${AWS::StackName}-DB-Parameters"
      Parameters:
        "timezone": "Asia/Tokyo"
        "statement_timeout": "1800000"
        "idle_in_transaction_session_timeout": "1800000"
        "log_min_error_statement": "INFO"
        "log_statement": !Ref RdsLogStatement
        "log_hostname": 0
        "work_mem": "65536"
        "temp_buffers": "8192"
        "wal_keep_size": "8192"
        "max_standby_archive_delay": "900000"
        "max_standby_streaming_delay": "900000"
        "max_worker_processes": "76"
        "max_parallel_workers": "76"
        "max_parallel_workers_per_gather": "76"
        "rds.logical_replication": 1 # RDSのBlue/Greenデプロイをするために有効化する必要がある

  ReplicaRdsParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Condition: EnableReadReplica
    Properties:
      Family: !Ref RdsParameterGroupFamily
      Description: !Sub "${AWS::StackName}-DB-Parameters-for-ReadReplica"
      Parameters:
        "timezone": "Asia/Tokyo"
        "log_min_error_statement": "INFO"
        "log_statement": !Ref RdsLogStatement
        "log_hostname": 0
        "work_mem": "65536"
        "temp_buffers": "8192"
        "hot_standby_feedback": "1"
        "max_standby_archive_delay": "-1"
        "max_standby_streaming_delay": "-1"
        "autovacuum": "0"

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName}-DB-SubnetGroup"
      SubnetIds:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnet1"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnet2"

  DbMasterUserSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DbMasterUserName}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: "\"@/\\"

  PrimaryRdsInstance:
    Type: AWS::RDS::DBInstance
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      DeletionProtection: false
      Engine: !Ref Engine
      EngineVersion: !Ref EngineVersion
      Port: !Ref RdsPort
      MultiAZ: !Ref EnableMultiAZ
      DBInstanceClass: !Ref PrimaryRdsInstanceClass
      StorageType: !Ref StorageType
      AllocatedStorage: !Ref AllocatedStorage
      MaxAllocatedStorage: !Ref MaxAllocatedStorage
      StorageEncrypted: true
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      EnableIAMDatabaseAuthentication: true
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "16:00-16:30"
      PreferredMaintenanceWindow: "sun:13:00-sun:14:00"
      MasterUsername: !Ref DbMasterUserName
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DbMasterUserSecret}::password}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBParameterGroupName: !Ref PrimaryRdsParameterGroup
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 731 # 731日（2年）
      MonitoringInterval: 60 # 60秒
      MonitoringRoleArn: !GetAtt RdsMonitoringRole.Arn
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      CACertificateIdentifier: rds-ca-rsa2048-g1

  ReplicaRdsInstance:
    Type: AWS::RDS::DBInstance
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Condition: EnableReadReplica
    Properties:
      DeletionProtection: false
      SourceDBInstanceIdentifier: !Ref PrimaryRdsInstance
      DBInstanceClass: !Ref ReplicaRdsInstanceClass
      DBParameterGroupName: !Ref ReplicaRdsParameterGroup
      Engine: !Ref Engine
      EngineVersion: !Ref EngineVersion
      StorageType: !Ref StorageType
      MaxAllocatedStorage: !Ref MaxAllocatedStorage
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      CACertificateIdentifier: rds-ca-rsa2048-g1
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  RdsSecurityGroupIngressPrivateSubnet1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RdsSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref RdsPort
      ToPort: !Ref RdsPort
      CidrIp:
        Fn::ImportValue:
          !Sub "${VpcStackName}-PrivateSubnet1CidrBlock"

  RdsSecurityGroupIngressPrivateSubnet2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RdsSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref RdsPort
      ToPort: !Ref RdsPort
      CidrIp:
        Fn::ImportValue:
          !Sub "${VpcStackName}-PrivateSubnet2CidrBlock"

  PrimaryRdsCustomDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Type: CNAME
      TTL: 60
      Name: !Ref PrimaryRdsCustomDomainName
      ResourceRecords:
        - !GetAtt PrimaryRdsInstance.Endpoint.Address

  ReplicaRdsCustomDomainRecord:
    Type: AWS::Route53::RecordSet
    Condition: EnableReadReplica
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Type: CNAME
      TTL: 60
      Name: !Ref ReplicaRdsCustomDomainName
      ResourceRecords:
        - !GetAtt ReplicaRdsInstance.Endpoint.Address