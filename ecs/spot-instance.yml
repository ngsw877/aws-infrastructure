AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AmazonLinux2LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  AppContainerName:
    Type: String
    Default: "app"
  WebContainerName:
    Type: String
    Default: "web"
  AppDockerImageTag:
    Type: String
    Default: "app"
  WebDockerImageTag:
    Type: String
    Default: "web"
  AppEnv:
    Type: String
    Default: "test"
  AppDebug:
    Type: String
    Default: "true"
  ManagedScalingEnabledState:
    Description: "Specifies the state of managed scaling for the ECS Capacity Provider (ENABLED or DISABLED)."
    Type: String
    Default: "ENABLED"
    AllowedValues:
      - "ENABLED"
      - "DISABLED"
  EcsInstanceDesiredCount:
    Type: Number
    Default: 1
  EcsInstanceMinCount:
    Type: Number
    Default: 1
  EcsInstanceMaxCount:
    Type: Number
    Default: 2
  EcsTaskCpu:
    Type: Number
    Default: 256
  EcsTaskMemory:
    Type: Number
    Default: 512
  TaskDesiredCount:
    Type: Number
    Default: 1
  TaskMinCount:
    Type: Number
    Default: 1
  TaskMaxCount:
    Type: Number
    Default: 2
  AutoScalingTargetValue:
    Type: Number
    Default: 80
  InstanceType1:
    Type: String
    Default: "m5.xlarge"
  InstanceType2:
    Type: String
    Default: "m5.2xlarge"
  InstanceType3:
    Type: String
    Default: "m5.4xlarge"
  InstanceType4:
    Type: String
    Default: "m5.8xlarge"
  VpcStackName:
    Type: String
    Default: "common-vpc"
  SecurityGroupStackName:
    Type: String
    Default: "common-sg"
  EcrStackName:
    Type: String
    Default: "common-ecr"
  AcmStackName:
    Type: String
    Default: "common-acm-for-alb"
  ContainerInsightsState:
    Type: String
    Default: "disabled"
    AllowedValues:
      - "enabled"
      - "disabled"
  ElbSecurityPolicy:
    Type: String
    Default: "ELBSecurityPolicy-TLS13-1-2-2021-06"

Resources:
  SpotEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  SpotEc2Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SpotEc2Role

  WebAppExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  WebAppEcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole"
      Path: "/"
      RoleName: !Sub "${AWS::StackName}-WebAppEcsTaskRole"

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      CapacityRebalance: true # 容量の再調整を有効化：「EC2 Instance Rebalance Recommendation」の通知が来たタイミングで新しいスポットインスタンスをリクエストし、起動成功したら古いインスタンスを終了する。
      NewInstancesProtectedFromScaleIn: false
      DesiredCapacity: !Ref EcsInstanceDesiredCount
      MinSize: !Ref EcsInstanceMinCount
      MaxSize: !Ref EcsInstanceMaxCount
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetAz1"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetAz2"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetAz3"
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: lowest-price
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: price-capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref WebAppLaunchTemplate
            Version: !GetAtt WebAppLaunchTemplate.DefaultVersionNumber
          Overrides:
            - InstanceType: !Ref InstanceType1
            - InstanceType: !Ref InstanceType2
            - InstanceType: !Ref InstanceType3
            - InstanceType: !Ref InstanceType4
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-auto-scaling-group"
          PropagateAtLaunch: true

  # ECSコンテナインスタンス用のセキュリティグループ
  ContainerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ecs container instance traffic"
      GroupName: !Sub "${AWS::StackName}-container-instance-sg"
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      # コンテナインスタンスはSSM接続を許可するため、アウトバウンドルールのみを解放して以下と通信できるようにする
      # - ssm.ap-northeast-1.amazonaws.com
      # - ec2messages.ap-northeast-1.amazonaws.com
      # - ssmmessages.ap-northeast -1.amazonaws.com
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmazonLinux2LatestAmiId
        IamInstanceProfile:
          Name: !Ref SpotEc2Profile
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2
        SecurityGroupIds:
          - !Ref ContainerInstanceSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash -x
              
              # コンテナインスタンスをECSクラスタに登録
              echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
              
              # 自動ドレインを有効化
              echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config

              # ECSログコレクターのスクリプトをダウンロード：https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ecs-logs-collector.html
              curl -O https://raw.githubusercontent.com/awslabs/ecs-logs-collector/master/ecs-logs-collector.sh

  WebAppEcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - WebAppAutoScalingGroup # スタック作成の際、ECSタスクの起動に失敗することがあるのでAutoScalingGroupが先に作成されるようにする @see: https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
      - WebAppLoadBalancer
      - WebAppHttpLoadBalancerListener
      - WebAppLogGroup
      - ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref WebAppEcsTask
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref TaskDesiredCount
      HealthCheckGracePeriodSeconds: 30
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetAz1"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetAz2"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetAz3"
          SecurityGroups:
            - Fn::ImportValue:
                !Sub "${SecurityGroupStackName}-WebAppSecurityGroup"
      LoadBalancers:
        - ContainerName: !Ref WebContainerName
          ContainerPort: 80
          TargetGroupArn: !Ref WebAppTargetGroup
      CapacityProviderStrategy:
        - CapacityProvider: !Ref SpotCapacityProvider
          Weight: 1
          Base: 1

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: WebAppEcsService
    Properties:
      MaxCapacity: !Ref TaskMaxCount
      MinCapacity: !Ref TaskMinCount
      ResourceId: !Join ['/', [service, !Ref EcsCluster, !GetAtt WebAppEcsService.Name]]
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: WebAppEcsService
    Properties:
      PolicyName: !Join ['', [!Ref WebAppEcsService, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${SecurityGroupStackName}-LoadBalancerSecurityGroup"
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PublicSubnetAz1"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PublicSubnetAz2"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PublicSubnetAz3"
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"

  WebAppHttpLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  WebAppHttpsLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref ElbSecurityPolicy
      Certificates:
        - CertificateArn: !ImportValue
            'Fn::Sub': "${AcmStackName}-CertificateArn"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup

  WebAppHttpsDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      HostedZoneId: !ImportValue
        'Fn::Sub': "${AcmStackName}-HostedZoneId"
      Name: !ImportValue
        'Fn::Sub': "${AcmStackName}-Fqdn"
      AliasTarget:
        HostedZoneId: !GetAtt WebAppLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt WebAppLoadBalancer.DNSName

  WebAppEcsTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-web-app"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      Cpu: !Ref EcsTaskCpu
      Memory: !Ref EcsTaskMemory
      ExecutionRoleArn: !Ref WebAppExecutionRole
      TaskRoleArn: !Ref WebAppEcsTaskRole
      ContainerDefinitions:
        # appコンテナ
        - Name: !Ref AppContainerName
          Image:
            Fn::Join:
              - ""
              - - !Ref AWS::AccountId
                - !Sub ".dkr.ecr.${AWS::Region}.amazonaws.com/"
                - Fn::ImportValue:
                    !Sub "${EcrStackName}-EcrRepositoryName"
                - ":"
                - !Ref AppDockerImageTag
          PortMappings:
            - { ContainerPort: 9000, HostPort: 9000 }
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: docker
          Environment:
            - Name: APP_ENV
              Value: !Ref AppEnv
            - Name: APP_DEBUG
              Value: !Ref AppDebug
            - Name: TZ
              Value: "Asia/Tokyo"
          ReadonlyRootFilesystem: false
        # webコンテナ
        - Name: !Ref WebContainerName
          Image: !Join
            - ""
            - - !Ref AWS::AccountId
              - !Sub ".dkr.ecr.${AWS::Region}.amazonaws.com/"
              - Fn::ImportValue:
                  !Sub "${EcrStackName}-EcrRepositoryName"
              - ":"
              - !Ref WebDockerImageTag
          PortMappings:
            - { ContainerPort: 80, HostPort: 80 }
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: docker

  # CloudWatch Logsロググループ
  WebAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/ecs"
      RetentionInDays: 7

  SpotCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    DependsOn: WebAppAutoScalingGroup
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref WebAppAutoScalingGroup
        ManagedScaling:
          Status: !Ref ManagedScalingEnabledState
          TargetCapacity: 100
        ManagedTerminationProtection: "DISABLED"

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-EcsCluster"
      ClusterSettings:
        - Name: containerInsights
          Value: !Ref ContainerInsightsState

  ClusterCapacityProviderAssociations:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviders:
        - !Ref SpotCapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 1
          Weight: 1
          CapacityProvider: !Ref SpotCapacityProvider

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: EIP
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-PublicSubnetAz1"

  # NAT Gateway用の固定IPアドレス
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway用のルーティングをプライベートサブネットのルートテーブルに追加する
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId:
        !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # プライベートサブネット用ルートテーブル
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateSubnetAz1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-PrivateSubnetAz1"

  PrivateSubnetAz2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-PrivateSubnetAz2"

  PrivateSubnetAz3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-PrivateSubnetAz3"
