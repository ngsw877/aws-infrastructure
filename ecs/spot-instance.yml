AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AmazonLinux2LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  EnvironmentName:
    Type: String
    Default: sample-ecs-spot-instance
  EcsInstanceDesiredCount:
    Type: Number
    Default: 1
  EcsInstanceMinCount:
    Type: Number
    Default: 1
  EcsInstanceMaxCount:
    Type: Number
    Default: 1
  TaskDesiredCount:
    Type: Number
    Default: 1
  TaskMinCount:
    Type: Number
    Default: 1
  TaskMaxCount:
    Type: Number
    Default: 1
  AutoScalingTargetValue:
    Type: Number
    Default: 80
  InstanceType1:
    Type: String
    Default: g4dn.xlarge
  InstanceType2:
    Type: String
    Default: g4dn.2xlarge
  InstanceType3:
    Type: String
    Default: g4dn.4xlarge
  InstanceType4:
    Type: String
    Default: g4dn.8xlarge
  VpcStackName:
    Type: String
    Default: "common-vpc"
  SecurityGroupStackName:
    Type: String
    Default: "common-sg"

Resources:
  SpotEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  SpotEc2Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: SpotEc2Role

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
        Path: "/"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole"

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # 容量の再調整を有効化：
      #「EC2 Instance Rebalance Recommendation」の通知が来たタイミングで新しいスポットインスタンスをリクエストし、起動成功したら古いインスタンスを終了する。
      CapacityRebalance: true
      DesiredCapacity: !Ref EcsInstanceDesiredCount
      MinSize: !Ref EcsInstanceMinCount
      MaxSize: !Ref EcsInstanceMaxCount
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnet1"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnet2"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnet3"
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: lowest-price
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: price-capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId:
              Ref: WebAppLaunchTemplate
            Version:
              Fn::GetAtt:
                - WebAppLaunchTemplate
                - DefaultVersionNumber
          Overrides:
            - InstanceType: !Ref InstanceType1
            - InstanceType: !Ref InstanceType2
            - InstanceType: !Ref InstanceType3
            - InstanceType: !Ref InstanceType4
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId:
          Ref: AmazonLinux2LatestAmiId
        IamInstanceProfile:
          Name:
            Ref: SpotEc2Profile
        UserData:
          Fn::Base64:
            Fn::Sub: >
              #!/bin/bash 
              
              # コンテナインスタンスをECSクラスタに登録
              
              echo ECS_CLUSTER=${AWS::StackName}ECSCluster >> /etc/ecs/ecs.config
              
              # 自動ドレインを有効化
              
              echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - TargetGroup
      - WebAppLoadBalancer
      - ALBListener
    Properties:
      Cluster:
        Ref: ECSCluster
      TaskDefinition:
        Ref: TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref TaskDesiredCount
      HealthCheckGracePeriodSeconds: 30
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnet1"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnet2"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnet3"
          SecurityGroups:
            - Fn::ImportValue:
                !Sub "${SecurityGroupStackName}-BackendSecurityGroup"
      LoadBalancers:
        - ContainerName:
            Ref: EnvironmentName
          ContainerPort: 80
          TargetGroupArn:
            Ref: TargetGroup
      CapacityProviderStrategy:
        - CapacityProvider:
            Ref: SpotCapacityProvider
          Weight: 1
          Base: 1

  ServiceScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    DependsOn: Service
    Properties:
      MaxCapacity: !Ref TaskMaxCount
      MinCapacity: !Ref TaskMinCount
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt Service.Name]]
      RoleARN: !GetAtt
        - AutoscalingRole
        - Arn
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    DependsOn: Service
    Properties:
      PolicyName: !Join ['', [!Ref Service, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue

  AutoscalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${SecurityGroupStackName}-LoadBalancerSecurityGroup"
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PublicSubnet1"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PublicSubnet2"
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      Cpu: 256
      Memory: 512
      ExecutionRoleArn:
        Ref: ExecutionRole
      TaskRoleArn:
        Ref: TaskRole
      ContainerDefinitions:
        - Name:
            Ref: EnvironmentName
          Image: public.ecr.aws/ecs-sample-image/amazon-ecs-sample
          PortMappings:
            - ContainerPort: 80

  SpotCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    DependsOn: WebAppAutoScalingGroup
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn:
          Ref: WebAppAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}ECSCluster
      CapacityProviders:
        - Ref: SpotCapacityProvider
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: EIP
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-PublicSubnet1"

  # NAT Gateway用の固定IPアドレス
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway用のルーティングをプライベートサブネットのルートテーブルに追加する
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId:
        !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # プライベートサブネット用ルートテーブル
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-PrivateSubnet1"

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-PrivateSubnet2"

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-PrivateSubnet3"
