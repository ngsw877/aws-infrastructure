name: Deploy to S3

on:
  workflow_call:
    inputs:
      deploy-to:
        description: デプロイ先環境
        type: string
        required: false
        default: ${{ github.ref_name }}
      branch:
        description: デプロイ対象ブランチ名
        type: string
        required: false
        default: ${{ github.ref_name }}
      frontend-dir:
        description: フロントエンドディレクトリ
        type: string
        required: false
        default: "demo-application/multi-tenant-ec/frontend"

env:
  AWS_REGION: "ap-northeast-1"
  FRONTEND_DIR: ${{ inputs.frontend-dir }}

defaults:
  run:
    shell: bash

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deploy-to }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set GitHub Actions role ARN
        id: set-role-arn
        env:
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
          CFN_STACK_NAME: ${{ vars.CFN_STACK_NAME }}
        run: |
          set -x
          GITHUB_ACTIONS_ROLE_ARN=arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.CFN_STACK_NAME }}-GitHubActionsRole
          echo "GITHUB_ACTIONS_ROLE_ARN=${GITHUB_ACTIONS_ROLE_ARN}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume:  ${{ steps.set-role-arn.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: false
      
      # 動的パラメータの解決
      - name: Set deployment parameters
        id: set-params
        env:
          CFN_STACK_NAME: ${{ vars.CFN_STACK_NAME }}
          FRONTEND_BUCKET_NAME_OUTPUT_KEY: "FrontendBucketName"
          DISTRIBUTION_ID_OUTPUT_KEY: "FrontendCloudFrontDistributionId"
        run: |
          set -x
          # CloudFormationスタックからOutputsを一度に取得
          CFN_OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CFN_STACK_NAME }} \
            --output json \
            --query "Stacks[0].Outputs")
          
          # スタックのOutputsから各値を取得
          FRONTEND_BUCKET_NAME=$(echo $CFN_OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.FRONTEND_BUCKET_NAME_OUTPUT_KEY }}\").OutputValue")
          DISTRIBUTION_ID=$(echo $CFN_OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.DISTRIBUTION_ID_OUTPUT_KEY }}\").OutputValue")

          # stepのoutputsとして設定
          echo "FRONTEND_BUCKET_NAME=${FRONTEND_BUCKET_NAME}" >> $GITHUB_OUTPUT
          echo "DISTRIBUTION_ID=${DISTRIBUTION_ID}" >> $GITHUB_OUTPUT

      # Node.jsのセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: '${{ env.FRONTEND_DIR }}/package-lock.json'
      
      # パッケージのインストール
      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          set -x
          npm ci

      # 静的ファイルの生成
      - name: Generate static files
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          set -x
          npm run generate

      # S3へのデプロイ
      - name: Deploy to S3
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          set -x
          aws s3 sync dist/ s3://${{ steps.set-params.outputs.FRONTEND_BUCKET_NAME }}/ --delete

      # CloudFrontのキャッシュ削除
      - name: Invalidate CloudFront Cache for Multitenants
        id: invalidate-cache
        run: |
          set -x
          
          # 親ディストリビューションIDを設定
          PARENT_DISTRIBUTION_ID="${{ steps.set-params.outputs.DISTRIBUTION_ID }}"
          
          # テナントIDをスペース区切りで取得
          # `--output text` はデフォルトでスペース区切りになる
          TENANT_IDS=$(aws cloudfront list-distribution-tenants \
            --association-filter DistributionId=$PARENT_DISTRIBUTION_ID \
            --query "DistributionTenantList[*].Id" \
            --output text)
          
          # テナントIDと無効化IDのペアを保存（形式: "tenant_id:invalidation_id tenant_id:invalidation_id ..."）
          TENANT_INVALIDATION_PAIRS=""
          
          # 取得したテナントIDを一つずつ処理
          for TENANT_ID in $TENANT_IDS; do
            # タイムスタンプを作成（一意のCallerReference用）
            # CallerReferenceは必須なので毎回ユニークな値を生成
            TIMESTAMP=$(date +%s)
            
            # テナントのキャッシュを無効化し、Invalidation IDを取得
            # --invalidation-batch はJSON形式で指定する必要がある
            INVALIDATION_RESULT=$(aws cloudfront create-invalidation-for-distribution-tenant \
              --id "$TENANT_ID" \
              --invalidation-batch "{\"Paths\":{\"Quantity\":1,\"Items\":[\"/*\"]},\"CallerReference\":\"$TIMESTAMP\"}" \
              --output json)
            
            INVALIDATION_ID=$(echo $INVALIDATION_RESULT | jq -r '.Invalidation.Id')
            echo "::notice::テナント ${TENANT_ID}: キャッシュ削除 ${INVALIDATION_ID} を開始しました"
            
            # テナントIDと無効化IDのペアを保存
            TENANT_INVALIDATION_PAIRS="${TENANT_INVALIDATION_PAIRS}${TENANT_ID}:${INVALIDATION_ID} "
          done
          
          # 無効化情報を出力として設定
          echo "TENANT_INVALIDATION_PAIRS=${TENANT_INVALIDATION_PAIRS}" >> $GITHUB_OUTPUT
          echo "PARENT_DISTRIBUTION_ID=${PARENT_DISTRIBUTION_ID}" >> $GITHUB_OUTPUT

      # キャッシュ削除の完了を待機
      - name: Wait for CloudFront Invalidations to Complete
        run: |
          set -x
          
          # テナントと無効化IDのペアを取得
          TENANT_INVALIDATION_PAIRS="${{ steps.invalidate-cache.outputs.TENANT_INVALIDATION_PAIRS }}"
          
          echo "::notice::すべてのキャッシュ削除の完了を待機しています..."
          
          # スペース区切りで各ペアを処理
          for PAIR in $TENANT_INVALIDATION_PAIRS; do
            # コロンで分割してテナントIDと無効化IDを取得
            IFS=':' read -r TENANT_ID INVALIDATION_ID <<< "$PAIR"
            
            echo "::notice::テナント ${TENANT_ID} の無効化 ${INVALIDATION_ID} の完了を待機中..."
            
            # AWS CLIのwaitコマンドで無効化の完了を待機
            # 20秒ごとにポーリングし、最大30回（約10分）待機
            aws cloudfront wait invalidation-for-distribution-tenant-completed \
              --distribution-tenant-id "$TENANT_ID" \
              --id "$INVALIDATION_ID"
            
            echo "::notice::テナント ${TENANT_ID} のキャッシュ削除が完了しました"
          done
          
          echo "::notice::すべてのキャッシュ削除が完了しました"

      # Slack通知
      - name: Notify Deployment Status to Slack
        if: always()
        uses: ./.github/actions/deployment-notification
        with:
          webhook-url: ${{ vars.DEPLOY_NOTIFICATION_SLACK_WEBHOOK_URL || '' }}
          status: ${{ job.status }}
          title: 'S3デプロイ'
          message-success: '✅ デプロイが正常に完了しました'
          message-failure: '❌ デプロイが失敗しました'
          fields: |
            [
              {"title": "環境", "value": "${{ inputs.deploy-to }}", "short": true},
              {"title": "ブランチ", "value": "${{ inputs.branch }}", "short": true},
              {"title": "S3バケット", "value": "${{ steps.set-params.outputs.FRONTEND_BUCKET_NAME }}", "short": true},
              {"title": "実行者", "value": "${{ github.actor }}", "short": true},
              {"title": "ワークフロー", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false}
            ]
