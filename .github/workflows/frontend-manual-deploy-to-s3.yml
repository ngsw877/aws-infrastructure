name: frontend-manual-deploy-to-s3

on:
  workflow_dispatch:
    inputs:
      deploy_to:
        required: true
        default: develop
        type: choice
        options:
          - staging
          - develop
        description: デプロイ先環境
      branch:
        required: true
        description: デプロイブランチ名

env:
  AWS_REGION: "ap-northeast-1"
  AWS_BASE_STACK_NAME: "S3EcsWebServiceMain"
  WORKING_DIRECTORY: "demo-application/frontend/"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deploy_to }}
    steps:
      # デプロイ先環境を設定
      - name: Determine deploy environment
        run: |
          if [ "${{ inputs.deploy_to }}" = "staging" ]; then
            echo "env_name=stg" >> $GITHUB_ENV
            echo "account_id=${{ secrets.STG_ACCOUNT_ID }}" >> $GITHUB_ENV
          elif [ "${{ inputs.deploy_to }}" = "develop" ]; then
            echo "env_name=dev" >> $GITHUB_ENV
            echo "account_id=${{ secrets.DEV_ACCOUNT_ID }}" >> $GITHUB_ENV
          else
            echo "Error: Invalid deploy target"
            exit 1
          fi

      # ロールを引き受ける
      - name: Determine assume role
        run: echo "role_to_assume=${{ 'arn:aws:iam::' }}${{ env.account_id }}${{ ':role/' }}${{ env.env_name }}${{ '-' }}${{ env.AWS_BASE_STACK_NAME }}${{ '-GitHubActionsRole' }}" >> $GITHUB_ENV

      # デプロイ先環境を表示
      - name: Display deploy environment
        run: echo "Deploy to ${{ env.env_name }}. Code from ${{ inputs.branch }}."

      - name: Configure AWS credentials (Dev / Staging)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.role_to_assume }}
          role-skip-session-tagging: true
          mask-aws-account-id: false
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      
      # Node.jsのセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'
      
      # パッケージのインストール
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      # CloudFormationの出力値を取得
      - name: Get CloudFormation outputs
        run: |
          CFN_STACK_NAME="${{ env.env_name }}-${{ env.AWS_BASE_STACK_NAME }}"
          
          # 各値を環境変数に設定
          API_BASE_URL=`aws cloudformation describe-stacks --stack-name ${CFN_STACK_NAME} --output text --query Stacks[].Outputs[?OutputKey==\\'ApiBaseUrl\\'].OutputValue`
          echo "API_BASE_URL=${API_BASE_URL}" >> $GITHUB_ENV
          
          FRONTEND_BUCKET_NAME=`aws cloudformation describe-stacks --stack-name ${CFN_STACK_NAME} --output text --query Stacks[].Outputs[?OutputKey==\\'FrontendBucketName\\'].OutputValue`
          echo "FRONTEND_BUCKET_NAME=${FRONTEND_BUCKET_NAME}" >> $GITHUB_ENV
          
          DISTRIBUTION_ID=`aws cloudformation describe-stacks --stack-name ${CFN_STACK_NAME} --output text --query Stacks[].Outputs[?OutputKey==\\'FrontendCloudFrontDistributionId\\'].OutputValue`
          echo "DISTRIBUTION_ID=${DISTRIBUTION_ID}" >> $GITHUB_ENV

      # 静的ファイルの生成
      - name: Generate static files
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run generate
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}

      # S3へのデプロイ
      - name: Deploy to S3
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: aws s3 sync dist/ s3://${{ env.FRONTEND_BUCKET_NAME }}/ --delete

      # CloudFrontのキャッシュ削除
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.DISTRIBUTION_ID }} \
            --paths "/*"
