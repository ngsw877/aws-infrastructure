name: Deploy to ECS

on:
  workflow_call:
    inputs:
      deploy-to:
        description: デプロイ先環境
        type: string
        required: false
        default: ${{ github.ref_name }}
      branch:
        description: デプロイ対象ブランチ名
        type: string
        required: false
        default: ${{ github.ref_name }}
      migration-mode:
        description: マイグレーション実行モード
        type: string
        required: false
        default: 'skip'
      backend-dir:
        description: バックエンドディレクトリ
        type: string
        required: false
        default: "demo-application/multi-tenant-ec/backend"

env:
  AWS_REGION: "ap-northeast-1"
  APP_DOCKER_CONTEXT: "./${{ inputs.backend-dir }}"
  WEB_DOCKER_CONTEXT: "./${{ inputs.backend-dir }}/docker/nginx"
  LOG_ROUTER_DOCKER_CONTEXT: "./${{ inputs.backend-dir }}/docker/fluentbit"
  MIGRATION_PATH: "./${{ inputs.backend-dir }}/database/migrations/**"

defaults:
  run:
    shell: bash

jobs:
  setup:
    runs-on: ubuntu-24.04-arm
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deploy-to }}
    steps:
      - name: Set GitHub Actions role ARN
        id: set-role-arn
        env:
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
          CFN_STACK_NAME: ${{ vars.CFN_STACK_NAME }}
        run: |
          set -x
          GITHUB_ACTIONS_ROLE_ARN=arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.CFN_STACK_NAME }}-GitHubActionsRole
          echo "GITHUB_ACTIONS_ROLE_ARN=${GITHUB_ACTIONS_ROLE_ARN}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ steps.set-role-arn.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: false

      # 動的パラメータの解決
      - name: Set deployment parameters
        id: set-params
        env:
          CFN_STACK_NAME: ${{ vars.CFN_STACK_NAME }}
          ECR_REPO_URI_OUTPUT_KEY: "EcrRepositoryUri"
          ECS_CLUSTER_ARN_OUTPUT_KEY: "EcsClusterArn"
          ECS_SERVICE_NAME_OUTPUT_KEY: "BackendEcsServiceName"
          ECS_TASK_DEFINITION_FAMILY_OUTPUT_KEY: "BackendTaskDefinitionFamily"
          ECS_SG_ID_OUTPUT_KEY: "BackendEcsServiceSecurityGroupId"
          PRIVATE_SUBNET_ID_OUTPUT_KEY: "PrivateSubnet1Id"
        run: |
          set -x
          # CloudFormationスタックからOutputsを一度に取得
          OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CFN_STACK_NAME }} \
            --output json \
            --query "Stacks[0].Outputs")

          # スタックのOutputsから各値を取得
          ECR_REPO_URI=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.ECR_REPO_URI_OUTPUT_KEY }}\").OutputValue")
          ECS_CLUSTER_ARN=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.ECS_CLUSTER_ARN_OUTPUT_KEY }}\").OutputValue")
          ECS_SERVICE_NAME=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.ECS_SERVICE_NAME_OUTPUT_KEY }}\").OutputValue")
          ECS_TASK_DEFINITION_FAMILY=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.ECS_TASK_DEFINITION_FAMILY_OUTPUT_KEY }}\").OutputValue")
          ECS_SG_ID=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.ECS_SG_ID_OUTPUT_KEY }}\").OutputValue")
          PRIVATE_SUBNET_ID=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.PRIVATE_SUBNET_ID_OUTPUT_KEY }}\").OutputValue")

          # ビルドバージョンを生成
          BUILD_VERSION="${GITHUB_SHA}-${GITHUB_RUN_NUMBER}"
          APP_IMAGE_TAG="app-${BUILD_VERSION}"
          WEB_IMAGE_TAG="web-${BUILD_VERSION}"
          LOG_ROUTER_IMAGE_TAG="log-router-${BUILD_VERSION}"

          # stepのoutputsとして設定
          echo "ECR_REPO_URI=${ECR_REPO_URI}" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_NAME=${ECR_REPO_URI#*/}" >> $GITHUB_OUTPUT
          echo "ECS_CLUSTER_ARN=${ECS_CLUSTER_ARN}" >> $GITHUB_OUTPUT
          echo "ECS_SERVICE_NAME=${ECS_SERVICE_NAME}" >> $GITHUB_OUTPUT
          echo "ECS_TASK_DEFINITION_FAMILY=${ECS_TASK_DEFINITION_FAMILY}" >> $GITHUB_OUTPUT
          echo "ECS_SG_ID=${ECS_SG_ID}" >> $GITHUB_OUTPUT
          echo "PRIVATE_SUBNET_ID=${PRIVATE_SUBNET_ID}" >> $GITHUB_OUTPUT

          echo "APP_IMAGE_TAG=${APP_IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "WEB_IMAGE_TAG=${WEB_IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "LOG_ROUTER_IMAGE_TAG=${LOG_ROUTER_IMAGE_TAG}" >> $GITHUB_OUTPUT

          echo "::notice::APP_IMAGE_TAG is ${APP_IMAGE_TAG}"
          echo "::notice::WEB_IMAGE_TAG is ${WEB_IMAGE_TAG}"
          echo "::notice::LOG_ROUTER_IMAGE_TAG is ${LOG_ROUTER_IMAGE_TAG}"
    outputs:
      GITHUB_ACTIONS_ROLE_ARN: ${{ steps.set-role-arn.outputs.GITHUB_ACTIONS_ROLE_ARN }}
      ECR_REPO_URI: ${{ steps.set-params.outputs.ECR_REPO_URI }}
      ECR_REPOSITORY_NAME: ${{ steps.set-params.outputs.ECR_REPOSITORY_NAME }}
      ECS_CLUSTER_ARN: ${{ steps.set-params.outputs.ECS_CLUSTER_ARN }}
      ECS_SERVICE_NAME: ${{ steps.set-params.outputs.ECS_SERVICE_NAME }}
      ECS_TASK_DEFINITION_FAMILY: ${{ steps.set-params.outputs.ECS_TASK_DEFINITION_FAMILY }}
      ECS_SG_ID: ${{ steps.set-params.outputs.ECS_SG_ID }}
      PRIVATE_SUBNET_ID: ${{ steps.set-params.outputs.PRIVATE_SUBNET_ID }}
      APP_IMAGE_TAG: ${{ steps.set-params.outputs.APP_IMAGE_TAG }}
      WEB_IMAGE_TAG: ${{ steps.set-params.outputs.WEB_IMAGE_TAG }}
      LOG_ROUTER_IMAGE_TAG: ${{ steps.set-params.outputs.LOG_ROUTER_IMAGE_TAG }}

  build-and-push-app-image:
    runs-on: ubuntu-24.04-arm
    needs: setup
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Build and push app image
        uses: ./.github/actions/build-and-push-image
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          context: ${{ env.APP_DOCKER_CONTEXT }}
          file: ${{ env.APP_DOCKER_CONTEXT }}/docker/php/Dockerfile
          ecr-image-tag: ${{ needs.setup.outputs.ECR_REPO_URI }}:${{ needs.setup.outputs.APP_IMAGE_TAG }}
          cache-scope: app
          target: deploy
          platforms: linux/arm64

  build-and-push-web-image:
    runs-on: ubuntu-24.04-arm
    needs: setup
    permissions:
      id-token: write
      contents: read
    env:
      BACKEND_APP_DOMAIN: "127.0.0.1"
      RESOLVER: "169.254.169.253"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Build and push web image
        uses: ./.github/actions/build-and-push-image
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          context: ${{ env.WEB_DOCKER_CONTEXT }}
          ecr-image-tag: ${{ needs.setup.outputs.ECR_REPO_URI }}:${{ needs.setup.outputs.WEB_IMAGE_TAG }}
          cache-scope: web
          platforms: linux/arm64
          build-args: |
            BACKEND_APP_DOMAIN=${{ env.BACKEND_APP_DOMAIN }}
            RESOLVER=${{ env.RESOLVER }}

  build-and-push-log-router-image:
    runs-on: ubuntu-24.04-arm
    needs: setup
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Build and push log-router image
        uses: ./.github/actions/build-and-push-image
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          context: ${{ env.LOG_ROUTER_DOCKER_CONTEXT }}
          ecr-image-tag: ${{ needs.setup.outputs.ECR_REPO_URI }}:${{ needs.setup.outputs.LOG_ROUTER_IMAGE_TAG }}
          cache-scope: log-router
          platforms: linux/arm64

  detect-migration-changes:
    runs-on: ubuntu-24.04-arm
    permissions:
      pull-requests: read
      contents: read
    outputs:
      MIGRATION_REQUIRED: ${{ steps.decide-migration.outputs.MIGRATION_REQUIRED }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      # https://github.com/dorny/paths-filter
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          # 【重要】マイグレーション検知の不具合対策
          # 症状：プルリクで新規マイグレーションファイルを追加しても検知されずスキップされる問題があった
          # 原因：baseパラメータ未指定時はリポジトリのデフォルトブランチ（develop）との差分を見るため
          #      developからmainへマージ後、「最新のdevelop と マージ後のmain の差分」が0と判定されてしまう
          # 解決策：base: ${{ github.ref }} を指定し「mainの直前の状態」と「最新のmain」の差分だけを見るよう修正
          base: ${{ github.ref }}
          filters: |
            migrations:
              - ${{ env.MIGRATION_PATH }}

      - id: decide-migration
        run: |
          if [ "${{ inputs.migration-mode }}" == "run" ]; then
            echo "MIGRATION_REQUIRED=true" >> $GITHUB_OUTPUT
            echo "::notice::マイグレーションは実行されます"
          elif [ "${{ inputs.migration-mode }}" == "skip" ]; then
            echo "MIGRATION_REQUIRED=false" >> $GITHUB_OUTPUT
            echo "::notice::マイグレーションはスキップされます"
          else
            echo "MIGRATION_REQUIRED=${{ steps.filter.outputs.migrations }}" >> $GITHUB_OUTPUT
            if [ "${{ steps.filter.outputs.migrations }}" == "true" ]; then
              echo "::notice::マイグレーションの変更が検知されました"
            else
              echo "::notice::マイグレーションの変更はありません"
            fi
          fi

  update-fixed-tags:
    needs: [setup, build-and-push-app-image, build-and-push-web-image, build-and-push-log-router-image]
    runs-on: ubuntu-24.04-arm
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deploy-to }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Update Fixed Tags
        env:
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
        run: |
          echo "::group::appイメージのマニフェストを取得"
          {
            set -x
            MANIFEST_APP=$(aws ecr batch-get-image \
              --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
              --image-ids imageTag=${{ needs.setup.outputs.APP_IMAGE_TAG }} \
              --output json | jq --raw-output --join-output '.images[0].imageManifest')
            set +x
          } 2>&1
          # NOTE: set -xは標準エラー出力であるからか、::group::で適切にグルーピングされないため2>&1でエラー出力を標準出力に変換
          echo "::endgroup::"

          echo "::group::webイメージのマニフェストを取得"
          {
            set -x
            MANIFEST_WEB=$(aws ecr batch-get-image \
              --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
              --image-ids imageTag=${{ needs.setup.outputs.WEB_IMAGE_TAG }} \
              --output json | jq --raw-output --join-output '.images[0].imageManifest')
            set +x
          } 2>&1
          echo "::endgroup::"

          echo "::group::log-routerイメージのマニフェストを取得"
          {
            set -x
            MANIFEST_LOG_ROUTER=$(aws ecr batch-get-image \
              --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
              --image-ids imageTag=${{ needs.setup.outputs.LOG_ROUTER_IMAGE_TAG }} \
              --output json | jq --raw-output --join-output '.images[0].imageManifest')
            set +x
          } 2>&1
          echo "::endgroup::"

          echo "::group::ECRのイメージのappタグを更新"
          {
            set -x
            aws ecr put-image --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
              --image-tag app --image-manifest "${MANIFEST_APP}" > app_log 2>&1 || {
                if [ $? -eq 254 ] && fgrep -q 'ImageAlreadyExistsException' app_log ; then
                  echo "Catch ImageAlreadyExistsException on app image deploy. It is OK, Ignored"
                  true
                else
                  cat app_log
                  false
                fi
              }
            set +x
          } 2>&1
          echo "::endgroup::"

          echo "::group::ECRのイメージのwebタグを更新"
          {
            set -x
            aws ecr put-image --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
              --image-tag web --image-manifest "${MANIFEST_WEB}" > web_log 2>&1 || {
              if [ $? -eq 254 ] && fgrep -q 'ImageAlreadyExistsException' web_log ; then
                echo "Catch ImageAlreadyExistsException on web image deploy. It is OK, Ignored"
                true
              else
                cat web_log
                  false
                fi
              }
            set +x
          } 2>&1
          echo "::endgroup::"

          echo "::group::ECRのイメージのlog-routerタグを更新"
          {
            set -x
            aws ecr put-image --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
              --image-tag log-router --image-manifest "${MANIFEST_LOG_ROUTER}" > log-router_log 2>&1 || {
              if [ $? -eq 254 ] && fgrep -q 'ImageAlreadyExistsException' log-router_log ; then
                echo "Catch ImageAlreadyExistsException on log-router image deploy. It is OK, Ignored"
                true
              else
                cat log-router_log
                false
              fi
            }
            set +x
          } 2>&1
          echo "::endgroup::"

  run-database-migration:
    needs: [setup, build-and-push-app-image, build-and-push-web-image, build-and-push-log-router-image, detect-migration-changes, update-fixed-tags]
    if: ${{ needs.detect-migration-changes.outputs.MIGRATION_REQUIRED == 'true' }}
    runs-on: ubuntu-24.04-arm
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deploy-to }}
    steps:
      # AWS認証情報の設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: false

      # Amazon ECRへのログイン
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      # マイグレーション用の一時タスク定義を作成
      - name: Register Migration Task Definition
        id: register-migration-task
        run: |
          set -x
          # 既存のECSサービス用のタスク定義を取得
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ needs.setup.outputs.ECS_TASK_DEFINITION_FAMILY }} \
            --query 'taskDefinition' \
            --output json)

          # 新しいタスク定義用にJSONを修正
          # - 不要なフィールドを削除（webコンテナも、マイグレーション用のタスクには不要なので除外する）
          # - appコンテナのイメージを一時タグに変更
          # - familyをマイグレーション用に変更
          MODIFIED_TASK_DEF=$(echo $TASK_DEF | jq --arg IMG "${{ needs.setup.outputs.ECR_REPO_URI }}:${{ needs.setup.outputs.APP_IMAGE_TAG }}" \
            --arg FAMILY "${{ needs.setup.outputs.ECS_TASK_DEFINITION_FAMILY }}-migration" \
            'del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .compatibilities,
              .registeredAt,
              .registeredBy
            ) |
            .containerDefinitions |= map(
              select(.name != "web") |
              if .name == "app" then .image = $IMG else . end
            ) |
            .family = $FAMILY')

          # マイグレーション用の一時タスク定義を登録
          # - ECSサービス用のタスク定義とは別に登録する
          # - 一時タスク用のタスク定義はCDK管理外
          MIGRATION_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json "$MODIFIED_TASK_DEF" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "MIGRATION_TASK_DEF_ARN=$MIGRATION_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          set +x

      # マイグレーションの実行
      - name: Run Migration
        id: migration
        run: |
          set -x
          TASK_ARN=$(aws ecs run-task \
            --cluster ${{ needs.setup.outputs.ECS_CLUSTER_ARN }} \
            --task-definition ${{ steps.register-migration-task.outputs.MIGRATION_TASK_DEF_ARN }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ needs.setup.outputs.PRIVATE_SUBNET_ID }}],securityGroups=[${{ needs.setup.outputs.ECS_SG_ID }}],assignPublicIp=DISABLED}" \
            --overrides '{
              "containerOverrides": [
                {
                  "name": "app",
                  "command": ["/bin/sh", "-c", "php artisan migrate --force || (php artisan migrate:rollback --force && exit 1)"]
                }
              ]
            }' \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          set +x

      # SlackチャンネルURLの出力
      - name: Output Slack Channel URL
        env:
          APP_LOG_SLACK_CHANNEL_URL: ${{ vars.APP_LOG_SLACK_CHANNEL_URL }}
        run: echo "::notice::マイグレーションが実行されました。ログの出力先Slackチャンネル：${{ env.APP_LOG_SLACK_CHANNEL_URL }}"

      # マイグレーションの完了を待機
      - name: Wait for Migration to Complete
        run: |
          set -x
          aws ecs wait tasks-stopped \
            --cluster ${{ needs.setup.outputs.ECS_CLUSTER_ARN }} \
            --tasks ${{ steps.migration.outputs.TASK_ARN }}
          set +x

      # マイグレーションの終了ステータスをチェック
      - name: Check Migration Status
        run: |
          set -x
          TASK_STATUS=$(aws ecs describe-tasks \
            --cluster ${{ needs.setup.outputs.ECS_CLUSTER_ARN }} \
            --tasks ${{ steps.migration.outputs.TASK_ARN }} \
            --query 'tasks[0].containers[?name==`app`].exitCode' \
            --output text)

          if [ "$TASK_STATUS" != "0" ]; then
            echo "マイグレーションに失敗しました。終了コード: ${TASK_STATUS}"
            exit 1
          fi
          set +x

  deploy-to-ecs:
    needs: [setup, build-and-push-app-image, build-and-push-web-image, build-and-push-log-router-image, detect-migration-changes, update-fixed-tags, run-database-migration]
    if: ${{ !cancelled() && !failure() }}
    runs-on: ubuntu-24.04-arm
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deploy-to }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      # ECSサービスの更新
      - name: Update ECS Service
        run: |
          set -x
          aws ecs update-service \
            --cluster ${{ needs.setup.outputs.ECS_CLUSTER_ARN }} \
            --service ${{ needs.setup.outputs.ECS_SERVICE_NAME }} \
            --force-new-deployment

      # デプロイ完了を待機
      - name: Wait for ECS Service Stable
        id: wait-deployment
        run: |
          set -x
          echo "::notice::ECSサービスのデプロイ完了を待機しています..."
          aws ecs wait services-stable \
            --cluster ${{ needs.setup.outputs.ECS_CLUSTER_ARN }} \
            --services ${{ needs.setup.outputs.ECS_SERVICE_NAME }} \
            --region ${{ env.AWS_REGION }}
          echo "DEPLOYMENT_STATUS=success" >> $GITHUB_OUTPUT

      # リポジトリのチェックアウト（deployment-notificationアクションで必要）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      # Slack通知
      - name: Notify Deployment Status to Slack
        if: always()
        uses: ./.github/actions/deployment-notification
        with:
          webhook-url: ${{ vars.DEPLOY_NOTIFICATION_SLACK_WEBHOOK_URL || '' }}
          status: ${{ job.status }}
          title: 'ECSデプロイ'
          message-success: '✅ デプロイが正常に完了しました'
          message-failure: '❌ デプロイが失敗しました'
          fields: |
            [
              {"title": "環境", "value": "${{ inputs.deploy-to }}", "short": true},
              {"title": "ブランチ", "value": "${{ inputs.branch }}", "short": true},
              {"title": "イメージタグ", "value": "${{ needs.setup.outputs.APP_IMAGE_TAG }}", "short": true},
              {"title": "実行者", "value": "${{ github.actor }}", "short": true},
              {"title": "ワークフロー", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false}
            ]
