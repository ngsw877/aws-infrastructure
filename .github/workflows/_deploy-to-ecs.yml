name: Deploy to ECS

on:
  workflow_call:
    inputs:
      deploy-to:
        description: デプロイ先環境
        type: string
        required: false
        default: ${{ github.ref_name }}
      branch:
        description: デプロイ対象ブランチ名
        type: string
        required: false
        default: ${{ github.ref_name }}

env:
  AWS_REGION: "ap-northeast-1"
  APP_DOCKER_CONTEXT: "./demo-application/backend/docker/php"
  WEB_DOCKER_CONTEXT: "./demo-application/backend/docker/nginx"

defaults:
  run:
    shell: bash

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deploy-to }}
    steps:
      - name: Set GitHub Actions role ARN
        id: set-role-arn
        env:
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
          CFN_STACK_NAME: ${{ vars.CFN_STACK_NAME }}
        run: |
          set -x
          GITHUB_ACTIONS_ROLE_ARN=arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.CFN_STACK_NAME }}-GitHubActionsRole
          echo "GITHUB_ACTIONS_ROLE_ARN=${GITHUB_ACTIONS_ROLE_ARN}" >> $GITHUB_OUTPUT
          set +x

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ steps.set-role-arn.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: false
  
      # 動的パラメータの解決
      - name: Set deployment parameters
        id: set-params
        env:
          CFN_STACK_NAME: ${{ vars.CFN_STACK_NAME }}
          ECR_REPO_URI_OUTPUT_KEY: "EcrRepositoryUri"
          ECS_CLUSTER_ARN_OUTPUT_KEY: "EcsClusterArn"
          ECS_BACKEND_SERVICE_NAME_OUTPUT_KEY: "BackendEcsServiceName"
        run: |
          set -x
          # CloudFormationスタックからOutputsを一度に取得
          OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.CFN_STACK_NAME }} \
            --output json \
            --query "Stacks[0].Outputs")

          # スタックのOutputsから各値を取得
          ECR_REPO_URI=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.ECR_REPO_URI_OUTPUT_KEY }}\").OutputValue")
          ECS_CLUSTER_ARN=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.ECS_CLUSTER_ARN_OUTPUT_KEY }}\").OutputValue")
          ECS_BACKEND_SERVICE_NAME=$(echo $OUTPUTS | jq -r ".[] | select(.OutputKey==\"${{ env.ECS_BACKEND_SERVICE_NAME_OUTPUT_KEY }}\").OutputValue")

          # ビルドバージョンを生成
          BUILD_VERSION="${GITHUB_SHA}-${GITHUB_RUN_NUMBER}"
          APP_IMAGE_TAG="app-${BUILD_VERSION}"
          WEB_IMAGE_TAG="web-${BUILD_VERSION}"

          # ジョブのoutputsとして設定
          echo "ECR_REPO_URI=${ECR_REPO_URI}" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_NAME=${ECR_REPO_URI#*/}" >> $GITHUB_OUTPUT
          echo "ECS_CLUSTER_ARN=${ECS_CLUSTER_ARN}" >> $GITHUB_OUTPUT
          echo "ECS_BACKEND_SERVICE_NAME=${ECS_BACKEND_SERVICE_NAME}" >> $GITHUB_OUTPUT
          echo "APP_IMAGE_TAG=${APP_IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "WEB_IMAGE_TAG=${WEB_IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          echo "::notice::APP_IMAGE_TAG is ${APP_IMAGE_TAG}"
          echo "::notice::WEB_IMAGE_TAG is ${WEB_IMAGE_TAG}"
          set +x
    outputs:
      GITHUB_ACTIONS_ROLE_ARN: ${{ steps.set-role-arn.outputs.GITHUB_ACTIONS_ROLE_ARN }}
      ECR_REPO_URI: ${{ steps.set-params.outputs.ECR_REPO_URI }}
      ECR_REPOSITORY_NAME: ${{ steps.set-params.outputs.ECR_REPOSITORY_NAME }}
      ECS_CLUSTER_ARN: ${{ steps.set-params.outputs.ECS_CLUSTER_ARN }}
      ECS_BACKEND_SERVICE_NAME: ${{ steps.set-params.outputs.ECS_BACKEND_SERVICE_NAME }}
      APP_IMAGE_TAG: ${{ steps.set-params.outputs.APP_IMAGE_TAG }}
      WEB_IMAGE_TAG: ${{ steps.set-params.outputs.WEB_IMAGE_TAG }}

  build-and-push-app-image:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Build and push app image
        uses: ./.github/actions/build-and-push-image
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          context: ${{ env.APP_DOCKER_CONTEXT }}
          ecr-image-tag: ${{ needs.setup.outputs.ECR_REPO_URI }}:${{ needs.setup.outputs.APP_IMAGE_TAG }}
          cache-scope: app

  build-and-push-web-image:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: write
      contents: read
    env:
      BACKEND_APP_DOMAIN: "127.0.0.1"
      RESOLVER: "169.254.169.253"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Build and push web image
        uses: ./.github/actions/build-and-push-image
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          context: ${{ env.WEB_DOCKER_CONTEXT }}
          ecr-image-tag: ${{ needs.setup.outputs.ECR_REPO_URI }}:${{ needs.setup.outputs.WEB_IMAGE_TAG }}
          cache-scope: web
          build-args: |
            BACKEND_APP_DOMAIN=${{ env.BACKEND_APP_DOMAIN }}
            RESOLVER=${{ env.RESOLVER }}

  delivery:
    runs-on: ubuntu-latest
    needs: [ "setup", "build-and-push-app-image", "build-and-push-web-image" ]
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.deploy-to }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.GITHUB_ACTIONS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Delivery
        env:
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
        run: |
          echo "::group::appイメージのマニフェストを取得"
          {
            set -x
            MANIFEST_APP=$(aws ecr batch-get-image \
              --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
              --image-ids imageTag=${{ needs.setup.outputs.APP_IMAGE_TAG }} \
              --output json | jq --raw-output --join-output '.images[0].imageManifest')
            set +x
          } 2>&1
          # NOTE: set -xは標準エラー出力であるからか、::group::で適切にグルーピングされないため2>&1でエラー出力を標準出力に変換
          echo "::endgroup::"

          echo "::group::webイメージのマニフェストを取得"
          {
            set -x
            MANIFEST_WEB=$(aws ecr batch-get-image \
              --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
            --image-ids imageTag=${{ needs.setup.outputs.WEB_IMAGE_TAG }} \
              --output json | jq --raw-output --join-output '.images[0].imageManifest')
            set +x
          } 2>&1
          echo "::endgroup::"

          echo "::group::ECRのイメージのappタグを更新"
          {
            set -x
            aws ecr put-image --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
              --image-tag app --image-manifest "${MANIFEST_APP}" > app_log 2>&1 || {
                # ImageAlreadyExistsExceptionをキャッチした場合、エラーをスキップ
                if [ $? -eq 254 ] && fgrep -q 'ImageAlreadyExistsException' app_log ; then
                  echo "Catch ImageAlreadyExistsException on app image deploy. It is OK, Ignored"
                  true
                else
                  # その他のエラーの場合はログを出力してエラー終了
                  cat app_log
                  false
                fi
              }
            set +x
          } 2>&1
          echo "::endgroup::"

          echo "::group::ECRのイメージのwebタグを更新"
          {
            set -x
            aws ecr put-image --registry-id ${{ env.AWS_ACCOUNT_ID }} \
              --repository-name ${{ needs.setup.outputs.ECR_REPOSITORY_NAME }} \
            --image-tag web --image-manifest "${MANIFEST_WEB}" > web_log 2>&1 || {
              # ImageAlreadyExistsExceptionをキャッチした場合、エラーをスキップ
              if [ $? -eq 254 ] && fgrep -q 'ImageAlreadyExistsException' web_log ; then
                echo "Catch ImageAlreadyExistsException on web image deploy. It is OK, Ignored"
                true
              else
                # その他のエラーの場合はログを出力してエラー終了
                cat web_log
                  false
                fi
              }
            set +x
          } 2>&1
          echo "::endgroup::"

          echo "::group::ECSサービスを更新"
          {
            set -x
            aws ecs update-service \
              --cluster ${{ needs.setup.outputs.ECS_CLUSTER_ARN }} \
              --service ${{ needs.setup.outputs.ECS_BACKEND_SERVICE_NAME }} \
              --force-new-deployment
            set +x
          } 2>&1
          echo "::endgroup::"