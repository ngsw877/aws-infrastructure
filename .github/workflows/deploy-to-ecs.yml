name: Deploy to Amazon ECS

on:
  workflow_dispatch:
#  push:
#    branches: [ "main" ]

env:
  AWS_REGION: "ap-northeast-1"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CFN_STACK_NAME: ${{ secrets.CFN_STACK_NAME }}
  ECR_REPO_URI: ${{ secrets.ECR_REPO_URI }}
#  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
#  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                               # file, e.g. .aws/task-definition.json
#  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
#                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Determine aws role arn
        run: |
          echo "AWS_ROLE_ARN=arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.CFN_STACK_NAME }}-GitHubActionsRole" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: false

      - name: Resolve dynamic params
        shell: bash
        run: |
          ECS_CLUSTER_NAME=$( aws cloudformation describe-stack-resources --stack-name ${{ env.CFN_STACK_NAME }} --output text --query 'StackResources[?ResourceType==`AWS::ECS::Cluster`].PhysicalResourceId')
          ECS_SERVICE_ARN=$( aws cloudformation describe-stack-resources --stack-name ${{ env.CFN_STACK_NAME }} --output text --query 'StackResources[?ResourceType==`AWS::ECS::Service`].PhysicalResourceId')
          ECS_SERVICE_NAME="${ECS_SERVICE_ARN##*/}"
          
          echo "ECS_CLUSTER_NAME=${ECS_CLUSTER_NAME}" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=${ECS_SERVICE_NAME}" >> $GITHUB_ENV
    outputs:
      AWS_ROLE_ARN: ${{env.AWS_ROLE_ARN}}
      ECR_REPO_URI: ${{env.ECR_REPO_URI}}
      ECS_CLUSTER_ARN: ${{env.ECS_CLUSTER_ARN}}
      ECS_SERVICE_NAME: ${{env.ECS_SERVICE_NAME}}

  build-and-push-app-image:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.AWS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: false

      - uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build app image
        uses: docker/build-push-action@v4
        with:
          context: ./ecs/docker/php
          push: true
          provenance: false
          tags: ${{ env.ECR_REPO_URI }}:${{github.run_number}}-app
          cache-from: type=gha,scope=app
          cache-to: type=gha,mode=max,scope=app

  build-and-push-web-image:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.setup.outputs.AWS_ROLE_ARN }}
          role-skip-session-tagging: true
          mask-aws-account-id: false

      - uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build web image
        uses: docker/build-push-action@v4
        env:
          BACKEND_APP_DOMAIN: "127.0.0.1"
          RESOLVER: "169.254.169.253"
        with:
          context: ./ecs/docker/nginx
          push: true
          provenance: false
          tags: ${{ env.ECR_REPO_URI }}:${{github.run_number}}-web
          cache-from: type=gha,scope=web
          cache-to: type=gha,mode=max,scope=web
          build-args: |
            BACKEND_APP_DOMAIN
            RESOLVER

#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    environment: production
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v3
#
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v2
#      with:
#        aws-region: ${{ env.AWS_REGION }}
#        role-to-assume: ${{ env.AWS_ROLE_ARN }}
#        role-skip-session-tagging: true
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
#        # Build a docker container and
#        # push it to ECR so that it can
#        # be deployed to ECS.
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: ${{ env.ECS_TASK_DEFINITION }}
#        container-name: ${{ env.CONTAINER_NAME }}
#        image: ${{ steps.build-image.outputs.image }}
#
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
