// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`スナップショットテスト GlobalStack スナップショットテスト 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AllowedIpSetdevs3ecswebservicekkstudyclick": {
      "Properties": {
        "Addresses": [
          "66.11.56.2/32",
        ],
        "IPAddressVersion": "IPV4",
        "Scope": "CLOUDFRONT",
      },
      "Type": "AWS::WAFv2::IPSet",
    },
    "AllowedIpSetdevs3ecswebservicesampleappclick": {
      "Properties": {
        "Addresses": [
          "52.68.208.207/32",
          "66.11.56.2/32",
        ],
        "IPAddressVersion": "IPV4",
        "Scope": "CLOUDFRONT",
      },
      "Type": "AWS::WAFv2::IPSet",
    },
    "CloudFrontCertificateA27ED7B2": {
      "Properties": {
        "DomainName": "dev.s3-ecs-web-service.sample-app.click",
        "DomainValidationOptions": [
          {
            "DomainName": "dev.s3-ecs-web-service.sample-app.click",
            "HostedZoneId": "Z0201048170ZNG2QS3LN1",
          },
          {
            "DomainName": "dev.s3-ecs-web-service.hoge-app.click",
            "HostedZoneId": "Z01140211URKT1J60WTA5",
          },
          {
            "DomainName": "dev.s3-ecs-web-service.kk-study.click",
            "HostedZoneId": "Z10072973EOGDWG5ZALL3",
          },
        ],
        "SubjectAlternativeNames": [
          "dev.s3-ecs-web-service.hoge-app.click",
          "dev.s3-ecs-web-service.kk-study.click",
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestGlobalStack-cloudfront-certificate",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
    },
    "CloudFrontWafLogConfig": {
      "DependsOn": [
        "CloudFrontWafLogsBucketAutoDeleteObjectsCustomResource6C90C21E",
        "CloudFrontWafLogsBucketPolicy18178717",
        "CloudFrontWafLogsBucketE8A85D26",
      ],
      "Properties": {
        "LogDestinationConfigs": [
          {
            "Fn::GetAtt": [
              "CloudFrontWafLogsBucketE8A85D26",
              "Arn",
            ],
          },
        ],
        "LoggingFilter": {
          "DefaultBehavior": "DROP",
          "Filters": [
            {
              "Behavior": "KEEP",
              "Conditions": [
                {
                  "ActionCondition": {
                    "Action": "BLOCK",
                  },
                },
              ],
              "Requirement": "MEETS_ALL",
            },
          ],
        },
        "ResourceArn": {
          "Fn::GetAtt": [
            "CloudFrontWebACL",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::LoggingConfiguration",
    },
    "CloudFrontWafLogsBucketAutoDeleteObjectsCustomResource6C90C21E": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CloudFrontWafLogsBucketPolicy18178717",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "CloudFrontWafLogsBucketE8A85D26",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontWafLogsBucketE8A85D26": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "BucketName": "aws-waf-logs-testglobalstack-cloudfrontwebacl",
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 90,
              "Id": "cloudfront-waf-log-expiration",
              "Status": "Enabled",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontWafLogsBucketPolicy18178717": {
      "Properties": {
        "Bucket": {
          "Ref": "CloudFrontWafLogsBucketE8A85D26",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudFrontWafLogsBucketE8A85D26",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CloudFrontWafLogsBucketE8A85D26",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudFrontWafLogsBucketE8A85D26",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CloudFrontWafLogsBucketE8A85D26",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CloudFrontWebACL": {
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Rules": [
          {
            "Name": "CommonSecurityProtection",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 1,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "CommonSecurityProtection",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Action": {
              "Block": {},
            },
            "Name": "IPRestriction-dev-s3-ecs-web-service-sample-app-click",
            "Priority": 10,
            "Statement": {
              "AndStatement": {
                "Statements": [
                  {
                    "ByteMatchStatement": {
                      "FieldToMatch": {
                        "SingleHeader": {
                          "Name": "host",
                        },
                      },
                      "PositionalConstraint": "EXACTLY",
                      "SearchString": "dev.s3-ecs-web-service.sample-app.click",
                      "TextTransformations": [
                        {
                          "Priority": 0,
                          "Type": "NONE",
                        },
                      ],
                    },
                  },
                  {
                    "NotStatement": {
                      "Statement": {
                        "IPSetReferenceStatement": {
                          "Arn": {
                            "Fn::GetAtt": [
                              "AllowedIpSetdevs3ecswebservicesampleappclick",
                              "Arn",
                            ],
                          },
                        },
                      },
                    },
                  },
                  {
                    "NotStatement": {
                      "Statement": {
                        "OrStatement": {
                          "Statements": [
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/sample",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/product",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/login",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/register",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/_nuxt/",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    },
                  },
                ],
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "IPRestriction-dev-s3-ecs-web-service-sample-app-click",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Action": {
              "Block": {},
            },
            "Name": "IPRestriction-dev-s3-ecs-web-service-kk-study-click",
            "Priority": 12,
            "Statement": {
              "AndStatement": {
                "Statements": [
                  {
                    "ByteMatchStatement": {
                      "FieldToMatch": {
                        "SingleHeader": {
                          "Name": "host",
                        },
                      },
                      "PositionalConstraint": "EXACTLY",
                      "SearchString": "dev.s3-ecs-web-service.kk-study.click",
                      "TextTransformations": [
                        {
                          "Priority": 0,
                          "Type": "NONE",
                        },
                      ],
                    },
                  },
                  {
                    "NotStatement": {
                      "Statement": {
                        "IPSetReferenceStatement": {
                          "Arn": {
                            "Fn::GetAtt": [
                              "AllowedIpSetdevs3ecswebservicekkstudyclick",
                              "Arn",
                            ],
                          },
                        },
                      },
                    },
                  },
                  {
                    "NotStatement": {
                      "Statement": {
                        "OrStatement": {
                          "Statements": [
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/sample",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/product",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/login",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/register",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                            {
                              "ByteMatchStatement": {
                                "FieldToMatch": {
                                  "UriPath": {},
                                },
                                "PositionalConstraint": "STARTS_WITH",
                                "SearchString": "/_nuxt/",
                                "TextTransformations": [
                                  {
                                    "Priority": 0,
                                    "Type": "NONE",
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    },
                  },
                ],
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "IPRestriction-dev-s3-ecs-web-service-kk-study-click",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "CLOUDFRONT",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "CloudFrontWebACL",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "CustomCrossRegionExportWriterCustomResourceProviderHandlerD8786E8A": {
      "DependsOn": [
        "CustomCrossRegionExportWriterCustomResourceProviderRoleC951B1E1",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-us-east-1",
          "S3Key": "8a17fb3ceee821f797100bf65fa3047c164a08c03aa5a07fbcff9a676fb73b97.zip",
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomCrossRegionExportWriterCustomResourceProviderRoleC951B1E1",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCrossRegionExportWriterCustomResourceProviderRoleC951B1E1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ssm:DeleteParameters",
                    "ssm:ListTagsForResource",
                    "ssm:GetParameters",
                    "ssm:PutParameter",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":ssm:ap-northeast-1:123456789012:parameter/cdk/exports/*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Inline",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-us-east-1",
          "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "CloudFrontWafLogsBucketE8A85D26",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ExportsWriterapnortheast12334E1B81D43DF3F": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCrossRegionExportWriterCustomResourceProviderHandlerD8786E8A",
            "Arn",
          ],
        },
        "WriterProps": {
          "exports": {
            "/cdk/exports/TestMainStack/TestGlobalStackuseast1FnGetAttCloudFrontWebACLArnF1D7A049": {
              "Fn::GetAtt": [
                "CloudFrontWebACL",
                "Arn",
              ],
            },
            "/cdk/exports/TestMainStack/TestGlobalStackuseast1RefCloudFrontCertificateA27ED7B2CCE1A2E7": {
              "Ref": "CloudFrontCertificateA27ED7B2",
            },
          },
          "region": "ap-northeast-1",
        },
      },
      "Type": "Custom::CrossRegionExportWriter",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`スナップショットテスト MainStack スナップショットテスト 1`] = `
{
  "Mappings": {
    "AWSCloudFrontPartitionHostedZoneIdMap": {
      "aws": {
        "zoneId": "Z2FDTNDATAQYW2",
      },
      "aws-cn": {
        "zoneId": "Z3RFFRIM2A3IF5",
      },
    },
    "AuroraServerlessClusterRotationSingleUserSARMapping517B1D8E": {
      "aws": {
        "applicationId": "arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSPostgreSQLRotationSingleUser",
        "semanticVersion": "1.1.367",
      },
      "aws-cn": {
        "applicationId": "arn:aws-cn:serverlessrepo:cn-north-1:193023089310:applications/SecretsManagerRDSPostgreSQLRotationSingleUser",
        "semanticVersion": "1.1.237",
      },
      "aws-us-gov": {
        "applicationId": "arn:aws-us-gov:serverlessrepo:us-gov-west-1:023102451235:applications/SecretsManagerRDSPostgreSQLRotationSingleUser",
        "semanticVersion": "1.1.213",
      },
    },
  },
  "Outputs": {
    "BackendEcsServiceName": {
      "Value": {
        "Fn::GetAtt": [
          "BackendEcsService1ECD309F",
          "Name",
        ],
      },
    },
    "BackendEcsServiceSecurityGroupId": {
      "Value": {
        "Fn::GetAtt": [
          "BackendEcsServiceSecurityGroup98025F89",
          "GroupId",
        ],
      },
    },
    "BackendTaskDefinitionFamily": {
      "Value": "TestMainStack-backend",
    },
    "BastionHostBastionHostIdC743CBD6": {
      "Description": "Instance ID of the bastion host. Use this to connect via SSM Session Manager",
      "Value": {
        "Ref": "BastionHost30F9ED05",
      },
    },
    "EcrRepositoryUri": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/",
            {
              "Ref": "BackendEcrRepository00C0B380",
            },
          ],
        ],
      },
    },
    "EcsClusterArn": {
      "Export": {
        "Name": "EcsClusterArn",
      },
      "Value": {
        "Fn::GetAtt": [
          "EcsCluster97242B84",
          "Arn",
        ],
      },
    },
    "FrontendBucketName": {
      "Value": {
        "Ref": "FrontendBucketEFE2E19C",
      },
    },
    "FrontendCloudFrontDistributionId": {
      "Value": {
        "Ref": "FrontendCloudFrontCloudFrontDistribution876417CC",
      },
    },
    "PrivateSubnet1Id": {
      "Value": {
        "Ref": "VpcPrivateSubnet1Subnet536B997A",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": {
    "AlbAliasRecorddevs3ecswebservicehogeappclickD53F30D3": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::Join": [
              "",
              [
                "dualstack.",
                {
                  "Fn::GetAtt": [
                    "BackendAlb0D5FE5C5",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "BackendAlb0D5FE5C5",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "Z01140211URKT1J60WTA5",
        "Name": "api.dev.s3-ecs-web-service.hoge-app.click.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "AlbAliasRecorddevs3ecswebservicekkstudyclickD946F12B": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::Join": [
              "",
              [
                "dualstack.",
                {
                  "Fn::GetAtt": [
                    "BackendAlb0D5FE5C5",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "BackendAlb0D5FE5C5",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "Z10072973EOGDWG5ZALL3",
        "Name": "api.dev.s3-ecs-web-service.kk-study.click.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "AlbAliasRecorddevs3ecswebservicesampleappclickD45CA370": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::Join": [
              "",
              [
                "dualstack.",
                {
                  "Fn::GetAtt": [
                    "BackendAlb0D5FE5C5",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "BackendAlb0D5FE5C5",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "Z0201048170ZNG2QS3LN1",
        "Name": "api.dev.s3-ecs-web-service.sample-app.click.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "AlbCertificate2652E3A6": {
      "Properties": {
        "DomainName": "api.dev.s3-ecs-web-service.sample-app.click",
        "DomainValidationOptions": [
          {
            "DomainName": "api.dev.s3-ecs-web-service.sample-app.click",
            "HostedZoneId": "Z0201048170ZNG2QS3LN1",
          },
          {
            "DomainName": "api.dev.s3-ecs-web-service.hoge-app.click",
            "HostedZoneId": "Z01140211URKT1J60WTA5",
          },
          {
            "DomainName": "api.dev.s3-ecs-web-service.kk-study.click",
            "HostedZoneId": "Z10072973EOGDWG5ZALL3",
          },
        ],
        "SubjectAlternativeNames": [
          "api.dev.s3-ecs-web-service.hoge-app.click",
          "api.dev.s3-ecs-web-service.kk-study.click",
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack-alb-certificate",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
    },
    "AlbWafAssociation": {
      "Properties": {
        "ResourceArn": {
          "Ref": "BackendAlb0D5FE5C5",
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "AlbWebACL",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "AlbWafLogConfig": {
      "DependsOn": [
        "AlbWafLogsBucketAutoDeleteObjectsCustomResource400A12DE",
        "AlbWafLogsBucketPolicyAFD750C6",
        "AlbWafLogsBucket083B17F6",
      ],
      "Properties": {
        "LogDestinationConfigs": [
          {
            "Fn::GetAtt": [
              "AlbWafLogsBucket083B17F6",
              "Arn",
            ],
          },
        ],
        "LoggingFilter": {
          "DefaultBehavior": "DROP",
          "Filters": [
            {
              "Behavior": "KEEP",
              "Conditions": [
                {
                  "ActionCondition": {
                    "Action": "BLOCK",
                  },
                },
              ],
              "Requirement": "MEETS_ALL",
            },
          ],
        },
        "ResourceArn": {
          "Fn::GetAtt": [
            "AlbWebACL",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::LoggingConfiguration",
    },
    "AlbWafLogsBucket083B17F6": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "BucketName": "aws-waf-logs-testmainstack-albwebacl",
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 30,
              "Id": "alb-waf-log-expiration",
              "Status": "Enabled",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "AlbWafLogsBucketAutoDeleteObjectsCustomResource400A12DE": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "AlbWafLogsBucketPolicyAFD750C6",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "AlbWafLogsBucket083B17F6",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "AlbWafLogsBucketPolicyAFD750C6": {
      "Properties": {
        "Bucket": {
          "Ref": "AlbWafLogsBucket083B17F6",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AlbWafLogsBucket083B17F6",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AlbWafLogsBucket083B17F6",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AlbWafLogsBucket083B17F6",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AlbWafLogsBucket083B17F6",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:GetBucketAcl",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": [
                    "arn:aws:logs:ap-northeast-1:123456789012:*",
                  ],
                },
                "StringEquals": {
                  "aws:SourceAccount": [
                    "123456789012",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "AlbWafLogsBucket083B17F6",
                  "Arn",
                ],
              },
              "Sid": "AWSLogDeliveryAclCheck",
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": [
                    "arn:aws:logs:ap-northeast-1:123456789012:*",
                  ],
                },
                "StringEquals": {
                  "aws:SourceAccount": [
                    "123456789012",
                  ],
                  "s3:x-amz-acl": "bucket-owner-full-control",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "AlbWafLogsBucket083B17F6",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/*",
                  ],
                ],
              },
              "Sid": "AWSLogDeliveryWrite",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "AlbWebACL": {
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Rules": [
          {
            "Name": "AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 1,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "AlbWebACL",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "AuroraAcuUtilizationAlarmC0EDE7BD": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "WarningSnsTopic281129C7",
          },
        ],
        "AlarmDescription": "Aurora ACUUtilization exceeds 80%",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "DBClusterIdentifier",
            "Value": {
              "Ref": "AuroraServerlessClusterB4A18EF1",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ACUUtilization",
        "Namespace": "AWS/RDS",
        "OKActions": [
          {
            "Ref": "WarningSnsTopic281129C7",
          },
        ],
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 80,
        "TreatMissingData": "breaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AuroraCpuUtilizationAlarmF5C560A1": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "WarningSnsTopic281129C7",
          },
        ],
        "AlarmDescription": "Aurora CPU Utilization exceeds 80%",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "DBClusterIdentifier",
            "Value": {
              "Ref": "AuroraServerlessClusterB4A18EF1",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/RDS",
        "OKActions": [
          {
            "Ref": "WarningSnsTopic281129C7",
          },
        ],
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 80,
        "TreatMissingData": "breaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AuroraFreeableMemoryAlarmC5AF5774": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "WarningSnsTopic281129C7",
          },
        ],
        "AlarmDescription": "Aurora FreeableMemory exceeds 95%",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "DBClusterIdentifier",
            "Value": {
              "Ref": "AuroraServerlessClusterB4A18EF1",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "FreeableMemory",
        "Namespace": "AWS/RDS",
        "OKActions": [
          {
            "Ref": "WarningSnsTopic281129C7",
          },
        ],
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 0.4,
        "TreatMissingData": "breaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AuroraReadOnlySecretCD5F8DA7": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": ""@/\\",
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "SecretStringTemplate": "{"username":"readonly_user","dbname":"sample_app"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "AuroraReadWriteSecret911E8582": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": ""@/\\",
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "SecretStringTemplate": "{"username":"readwrite_user","dbname":"sample_app"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "AuroraSchedulerExecutionRoleDefaultPolicyE481BF19": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "rds:StopDBCluster",
                "rds:StartDBCluster",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds:ap-northeast-1:123456789012:cluster:",
                    {
                      "Ref": "AuroraServerlessClusterB4A18EF1",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuroraSchedulerExecutionRoleDefaultPolicyE481BF19",
        "Roles": [
          {
            "Ref": "AuroraSchedulerExecutionRoleFBCA4F7C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuroraSchedulerExecutionRoleFBCA4F7C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "scheduler.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AuroraSecret41E6E877": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": ""@/\\",
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "SecretStringTemplate": "{"username":"webapp","dbname":"sample_app"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "AuroraSecretAttachment65089D67": {
      "Properties": {
        "SecretId": {
          "Ref": "AuroraSecret41E6E877",
        },
        "TargetId": {
          "Ref": "AuroraServerlessClusterB4A18EF1",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "AuroraSecretAttachmentPolicy440E6483": {
      "Properties": {
        "ResourcePolicy": {
          "Statement": [
            {
              "Action": "secretsmanager:DeleteSecret",
              "Effect": "Deny",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::123456789012:root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "SecretId": {
          "Ref": "AuroraSecretAttachment65089D67",
        },
      },
      "Type": "AWS::SecretsManager::ResourcePolicy",
    },
    "AuroraSecretAttachmentRotationSchedule439344A1": {
      "Properties": {
        "RotationLambdaARN": {
          "Fn::GetAtt": [
            "AuroraServerlessClusterRotationSingleUser3C9446AC",
            "Outputs.RotationLambdaARN",
          ],
        },
        "RotationRules": {
          "ScheduleExpression": "rate(30 days)",
        },
        "SecretId": {
          "Ref": "AuroraSecretAttachment65089D67",
        },
      },
      "Type": "AWS::SecretsManager::RotationSchedule",
    },
    "AuroraServerlessClusterB4A18EF1": {
      "DeletionPolicy": "Snapshot",
      "Properties": {
        "BackupRetentionPeriod": 7,
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": {
          "Ref": "ParameterGroup5E32DECB",
        },
        "DBSubnetGroupName": {
          "Ref": "SubnetGroup",
        },
        "DeletionProtection": false,
        "EnableCloudwatchLogsExports": [
          "postgresql",
        ],
        "EnableHttpEndpoint": true,
        "EnableIAMDatabaseAuthentication": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "16.3",
        "KmsKeyId": {
          "Fn::GetAtt": [
            "AuroraStorageEncryptionKey8F352B9A",
            "Arn",
          ],
        },
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "AuroraSecret41E6E877",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "AuroraSecret41E6E877",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "Port": 5432,
        "PreferredBackupWindow": "16:00-17:00",
        "PreferredMaintenanceWindow": "Sun:13:00-Sun:13:30",
        "ServerlessV2ScalingConfiguration": {
          "MaxCapacity": 4,
          "MinCapacity": 0.5,
        },
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "AuroraServerlessClusterSecurityGroup5A67466E",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Snapshot",
    },
    "AuroraServerlessClusterLogRetentionpostgresql65064C48": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/rds/cluster/",
              {
                "Ref": "AuroraServerlessClusterB4A18EF1",
              },
              "/postgresql",
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "AuroraServerlessClusterRotationSingleUser3C9446AC": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Location": {
          "ApplicationId": {
            "Fn::FindInMap": [
              "AuroraServerlessClusterRotationSingleUserSARMapping517B1D8E",
              {
                "Ref": "AWS::Partition",
              },
              "applicationId",
            ],
          },
          "SemanticVersion": {
            "Fn::FindInMap": [
              "AuroraServerlessClusterRotationSingleUserSARMapping517B1D8E",
              {
                "Ref": "AWS::Partition",
              },
              "semanticVersion",
            ],
          },
        },
        "Parameters": {
          "endpoint": {
            "Fn::Join": [
              "",
              [
                "https://secretsmanager.ap-northeast-1.",
                {
                  "Ref": "AWS::URLSuffix",
                },
              ],
            ],
          },
          "excludeCharacters": ""@/\\",
          "functionName": "TestMainStackAuroraServerlessClusterRotationSingleUser7100BF44",
          "vpcSecurityGroupIds": {
            "Fn::GetAtt": [
              "AuroraServerlessClusterRotationSingleUserSecurityGroup5E2CF362",
              "GroupId",
            ],
          },
          "vpcSubnetIds": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "VpcPrivateSubnet1Subnet536B997A",
                },
                ",",
                {
                  "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
                },
              ],
            ],
          },
        },
      },
      "Type": "AWS::Serverless::Application",
      "UpdateReplacePolicy": "Delete",
    },
    "AuroraServerlessClusterRotationSingleUserSecurityGroup5E2CF362": {
      "Properties": {
        "GroupDescription": "TestMainStack/AuroraServerlessCluster/RotationSingleUser/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AuroraServerlessClusterSecurityGroup5A67466E": {
      "Properties": {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AuroraServerlessClusterSecurityGroupfromTestMainStackAuroraServerlessClusterRotationSingleUserSecurityGroupC35A9835IndirectPortD1301000": {
      "Properties": {
        "Description": "from TestMainStackAuroraServerlessClusterRotationSingleUserSecurityGroupC35A9835:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "AuroraServerlessClusterB4A18EF1",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "AuroraServerlessClusterSecurityGroup5A67466E",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "AuroraServerlessClusterRotationSingleUserSecurityGroup5E2CF362",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "AuroraServerlessClusterB4A18EF1",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuroraServerlessClusterSecurityGroupfromTestMainStackBackendEcsServiceSecurityGroup35F1D5F35432B0311E86": {
      "Properties": {
        "Description": "Allow access from Backend ECS Service",
        "FromPort": 5432,
        "GroupId": {
          "Fn::GetAtt": [
            "AuroraServerlessClusterSecurityGroup5A67466E",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "BackendEcsServiceSecurityGroup98025F89",
            "GroupId",
          ],
        },
        "ToPort": 5432,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuroraServerlessClusterSecurityGroupfromTestMainStackBastionHostInstanceSecurityGroupF05BC1795432DA8FC14A": {
      "Properties": {
        "Description": "Allow access from Bastion host",
        "FromPort": 5432,
        "GroupId": {
          "Fn::GetAtt": [
            "AuroraServerlessClusterSecurityGroup5A67466E",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "BastionHostInstanceSecurityGroupE75D4274",
            "GroupId",
          ],
        },
        "ToPort": 5432,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuroraServerlessClusterWriter0599092D": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "VpcPrivateSubnet1DefaultRouteBE02A9ED",
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6",
        "VpcPrivateSubnet2DefaultRoute060D2087",
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56",
      ],
      "Properties": {
        "AutoMinorVersionUpgrade": false,
        "DBClusterIdentifier": {
          "Ref": "AuroraServerlessClusterB4A18EF1",
        },
        "DBInstanceClass": "db.serverless",
        "EnablePerformanceInsights": true,
        "Engine": "aurora-postgresql",
        "PerformanceInsightsRetentionPeriod": 7,
        "PreferredMaintenanceWindow": "Sun:13:30-Sun:14:00",
        "PromotionTier": 0,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "AuroraStartSchedule": {
      "Properties": {
        "FlexibleTimeWindow": {
          "Mode": "OFF",
        },
        "ScheduleExpression": "cron(20 7 ? * MON-FRI *)",
        "ScheduleExpressionTimezone": "Asia/Tokyo",
        "State": "ENABLED",
        "Target": {
          "Arn": "arn:aws:scheduler:::aws-sdk:rds:startDBCluster",
          "Input": {
            "Fn::Join": [
              "",
              [
                "{"DbClusterIdentifier":"",
                {
                  "Ref": "AuroraServerlessClusterB4A18EF1",
                },
                ""}",
              ],
            ],
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "AuroraSchedulerExecutionRoleFBCA4F7C",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Scheduler::Schedule",
    },
    "AuroraStopSchedule": {
      "Properties": {
        "FlexibleTimeWindow": {
          "Mode": "OFF",
        },
        "ScheduleExpression": "cron(0 21 ? * MON-FRI *)",
        "ScheduleExpressionTimezone": "Asia/Tokyo",
        "State": "ENABLED",
        "Target": {
          "Arn": "arn:aws:scheduler:::aws-sdk:rds:stopDBCluster",
          "Input": {
            "Fn::Join": [
              "",
              [
                "{"DbClusterIdentifier":"",
                {
                  "Ref": "AuroraServerlessClusterB4A18EF1",
                },
                ""}",
              ],
            ],
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "AuroraSchedulerExecutionRoleFBCA4F7C",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Scheduler::Schedule",
    },
    "AuroraStorageEncryptionKey8F352B9A": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "KMS key for Aurora storage encryption",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::123456789012:root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "AutoScalingSchedulerExecutionRoleB9390E91": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "scheduler.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AutoScalingSchedulerExecutionRoleDefaultPolicyF74D50C6": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "application-autoscaling:RegisterScalableTarget",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AutoScalingSchedulerExecutionRoleDefaultPolicyF74D50C6",
        "Roles": [
          {
            "Ref": "AutoScalingSchedulerExecutionRoleB9390E91",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AutoScalingStartSchedule": {
      "Properties": {
        "FlexibleTimeWindow": {
          "Mode": "OFF",
        },
        "ScheduleExpression": "cron(0 8 ? * MON-FRI *)",
        "ScheduleExpressionTimezone": "Asia/Tokyo",
        "State": "ENABLED",
        "Target": {
          "Arn": "arn:aws:scheduler:::aws-sdk:applicationautoscaling:registerScalableTarget",
          "Input": {
            "Fn::Join": [
              "",
              [
                "{"ServiceNamespace":"ecs","ScalableDimension":"ecs:service:DesiredCount","ResourceId":"service/",
                {
                  "Ref": "EcsCluster97242B84",
                },
                "/",
                {
                  "Fn::GetAtt": [
                    "BackendEcsService1ECD309F",
                    "Name",
                  ],
                },
                "","MinCapacity":1,"MaxCapacity":1}",
              ],
            ],
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "AutoScalingSchedulerExecutionRoleB9390E91",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Scheduler::Schedule",
    },
    "AutoScalingStopSchedule": {
      "Properties": {
        "FlexibleTimeWindow": {
          "Mode": "OFF",
        },
        "ScheduleExpression": "cron(0 21 ? * MON-FRI *)",
        "ScheduleExpressionTimezone": "Asia/Tokyo",
        "State": "ENABLED",
        "Target": {
          "Arn": "arn:aws:scheduler:::aws-sdk:applicationautoscaling:registerScalableTarget",
          "Input": {
            "Fn::Join": [
              "",
              [
                "{"ServiceNamespace":"ecs","ScalableDimension":"ecs:service:DesiredCount","ResourceId":"service/",
                {
                  "Ref": "EcsCluster97242B84",
                },
                "/",
                {
                  "Fn::GetAtt": [
                    "BackendEcsService1ECD309F",
                    "Name",
                  ],
                },
                "","MinCapacity":0,"MaxCapacity":0}",
              ],
            ],
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "AutoScalingSchedulerExecutionRoleB9390E91",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Scheduler::Schedule",
    },
    "BackendAlb0D5FE5C5": {
      "DependsOn": [
        "LogsBucketAutoDeleteObjectsCustomResource7D54FB85",
        "LogsBucketPolicyD70D9252",
        "LogsBucket9C4D8843",
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet1RouteTableAssociation97140677",
        "VpcPublicSubnet2DefaultRoute97F91067",
        "VpcPublicSubnet2RouteTableAssociationDD5762D8",
      ],
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
          {
            "Key": "routing.http.drop_invalid_header_fields.enabled",
            "Value": "true",
          },
          {
            "Key": "access_logs.s3.enabled",
            "Value": "true",
          },
          {
            "Key": "access_logs.s3.bucket",
            "Value": {
              "Ref": "LogsBucket9C4D8843",
            },
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "BackendAlbSecurityGroupCD822480",
              "GroupId",
            ],
          },
        ],
        "Subnets": [
          {
            "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
          },
          {
            "Ref": "VpcPublicSubnet2Subnet691E08A3",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "BackendAlbHttpListener58B160AA": {
      "DependsOn": [
        "LogsBucketAutoDeleteObjectsCustomResource7D54FB85",
        "LogsBucketPolicyD70D9252",
        "LogsBucket9C4D8843",
      ],
      "Properties": {
        "DefaultActions": [
          {
            "RedirectConfig": {
              "Port": "443",
              "Protocol": "HTTPS",
              "StatusCode": "HTTP_301",
            },
            "Type": "redirect",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "BackendAlb0D5FE5C5",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "BackendAlbHttpsListener29FF98D3": {
      "DependsOn": [
        "LogsBucketAutoDeleteObjectsCustomResource7D54FB85",
        "LogsBucketPolicyD70D9252",
        "LogsBucket9C4D8843",
      ],
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "AlbCertificate2652E3A6",
            },
          },
        ],
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "BackendAlbHttpsListenerAppTargetGroupGroupDDF1558E",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "BackendAlb0D5FE5C5",
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS13-1-2-2021-06",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "BackendAlbHttpsListenerAppTargetGroupGroupDDF1558E": {
      "DependsOn": [
        "LogsBucketAutoDeleteObjectsCustomResource7D54FB85",
        "LogsBucketPolicyD70D9252",
        "LogsBucket9C4D8843",
      ],
      "Properties": {
        "HealthCheckEnabled": true,
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/",
        "HealthCheckTimeoutSeconds": 2,
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200",
        },
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "BackendAlbSecurityGroupCD822480": {
      "Properties": {
        "GroupDescription": "Security group for Backend ALB",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "BackendAppLogDeliveryStream": {
      "Properties": {
        "DeliveryStreamEncryptionConfigurationInput": {
          "KeyType": "AWS_OWNED_CMK",
        },
        "DeliveryStreamName": "TestMainStack-backend-app-log",
        "DeliveryStreamType": "DirectPut",
        "S3DestinationConfiguration": {
          "BucketARN": {
            "Fn::GetAtt": [
              "LogsBucket9C4D8843",
              "Arn",
            ],
          },
          "CloudWatchLoggingOptions": {
            "Enabled": true,
            "LogGroupName": {
              "Ref": "BackendKinesisErrorLogGroupECF5A9CA",
            },
            "LogStreamName": {
              "Ref": "BackendKinesisErrorAppLogStreamE8A5710E",
            },
          },
          "CompressionFormat": "GZIP",
          "EncryptionConfiguration": {
            "KMSEncryptionConfig": {
              "AWSKMSKeyARN": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kms:ap-northeast-1:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab",
                  ],
                ],
              },
            },
          },
          "Prefix": "backend/app/",
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseRoleAA67C190",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "BackendEcrRepository00C0B380": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{"rules":[{"rulePriority":10,"description":"app Delete more than 3 images","selection":{"tagStatus":"tagged","tagPatternList":["*app*"],"countType":"imageCountMoreThan","countNumber":3},"action":{"type":"expire"}},{"rulePriority":20,"description":"web Delete more than 3 images","selection":{"tagStatus":"tagged","tagPatternList":["*web*"],"countType":"imageCountMoreThan","countNumber":3},"action":{"type":"expire"}},{"rulePriority":30,"description":"log Delete more than 3 images","selection":{"tagStatus":"tagged","tagPatternList":["*log*"],"countType":"imageCountMoreThan","countNumber":3},"action":{"type":"expire"}},{"rulePriority":80,"description":"All Tagged Delete more than 3 images","selection":{"tagStatus":"tagged","tagPatternList":["*"],"countType":"imageCountMoreThan","countNumber":3},"action":{"type":"expire"}},{"rulePriority":90,"description":"All Untagged Delete more than 3 images","selection":{"tagStatus":"untagged","countType":"imageCountMoreThan","countNumber":3},"action":{"type":"expire"}}]}",
        },
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Delete",
    },
    "BackendEcsService1ECD309F": {
      "DependsOn": [
        "BackendAlbHttpsListenerAppTargetGroupGroupDDF1558E",
        "BackendAlbHttpsListener29FF98D3",
        "EcsTaskRoleDefaultPolicy50882C77",
        "EcsTaskRole8DFA0181",
      ],
      "Properties": {
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
        ],
        "Cluster": {
          "Ref": "EcsCluster97242B84",
        },
        "DeploymentConfiguration": {
          "Alarms": {
            "AlarmNames": [],
            "Enable": false,
            "Rollback": false,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LoadBalancers": [
          {
            "ContainerName": "web",
            "ContainerPort": 80,
            "TargetGroupArn": {
              "Ref": "BackendAlbHttpsListenerAppTargetGroupGroupDDF1558E",
            },
          },
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "BackendEcsServiceSecurityGroup98025F89",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              {
                "Ref": "VpcPrivateSubnet1Subnet536B997A",
              },
              {
                "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
              },
            ],
          },
        },
        "PlatformVersion": "LATEST",
        "TaskDefinition": {
          "Ref": "BackendEcsTask81D1B054",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "BackendEcsServiceSecurityGroup98025F89": {
      "Properties": {
        "GroupDescription": "Security group for Backend ECS Service",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "BackendEcsServiceSecurityGroupfromTestMainStackBackendAlbSecurityGroup3923B4178078B1C392": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "BackendEcsServiceSecurityGroup98025F89",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "BackendAlbSecurityGroupCD822480",
            "GroupId",
          ],
        },
        "ToPort": 80,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "BackendEcsTask81D1B054": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::Select": [
                      4,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::GetAtt": [
                              "BackendEcrRepository00C0B380",
                              "Arn",
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  ".dkr.ecr.",
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::GetAtt": [
                              "BackendEcrRepository00C0B380",
                              "Arn",
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/",
                  {
                    "Ref": "BackendEcrRepository00C0B380",
                  },
                  ":web",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
            },
            "Name": "web",
            "PortMappings": [
              {
                "ContainerPort": 80,
                "HostPort": 80,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": false,
          },
          {
            "Environment": [
              {
                "Name": "TZ",
                "Value": "Asia/Tokyo",
              },
              {
                "Name": "APP_ENV",
                "Value": "dev",
              },
              {
                "Name": "APP_DEBUG",
                "Value": "true",
              },
              {
                "Name": "AWS_BUCKET",
                "Value": {
                  "Ref": "UploadedFilesBucket10DD2840",
                },
              },
              {
                "Name": "AWS_URL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "https://",
                      {
                        "Fn::GetAtt": [
                          "UploadedFilesBucket10DD2840",
                          "RegionalDomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              {
                "Name": "MAIL_MAILER",
                "Value": "ses",
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::Select": [
                      4,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::GetAtt": [
                              "BackendEcrRepository00C0B380",
                              "Arn",
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  ".dkr.ecr.",
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::GetAtt": [
                              "BackendEcrRepository00C0B380",
                              "Arn",
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/",
                  {
                    "Ref": "BackendEcrRepository00C0B380",
                  },
                  ":app",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
            },
            "Name": "app",
            "ReadonlyRootFilesystem": false,
            "Secrets": [
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "AuroraSecret41E6E877",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PORT",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "AuroraSecret41E6E877",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "AuroraSecret41E6E877",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_DATABASE",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "AuroraSecret41E6E877",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "AuroraSecret41E6E877",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "APP_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:ap-northeast-1:123456789012:parameter/TestMainStack/ecs-task-def/app/env-vars/app-key",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "KINESIS_APP_DELIVERY_STREAM",
                "Value": {
                  "Ref": "BackendAppLogDeliveryStream",
                },
              },
              {
                "Name": "KINESIS_WEB_DELIVERY_STREAM",
                "Value": {
                  "Ref": "BackendWebLogDeliveryStream",
                },
              },
              {
                "Name": "AWS_REGION",
                "Value": "ap-northeast-1",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Options": {
                "config-file-type": "file",
                "config-file-value": "/fluent-bit.conf",
                "enable-ecs-log-metadata": "false",
              },
              "Type": "fluentbit",
            },
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::Select": [
                      4,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::GetAtt": [
                              "BackendEcrRepository00C0B380",
                              "Arn",
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  ".dkr.ecr.",
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::GetAtt": [
                              "BackendEcrRepository00C0B380",
                              "Arn",
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/",
                  {
                    "Ref": "BackendEcrRepository00C0B380",
                  },
                  ":log-router",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "BackendLogRouterLogGroupE7282ADD",
                },
                "awslogs-region": "ap-northeast-1",
                "awslogs-stream-prefix": "firelens",
              },
            },
            "Name": "log-router",
            "Secrets": [
              {
                "Name": "APP_LOG_SLACK_WEBHOOK_URL",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:ap-northeast-1:123456789012:parameter/TestMainStack/ecs-task-def/log-router/env-vars/app-log-slack-webhook-url",
                    ],
                  ],
                },
              },
            ],
            "User": "0",
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "EcsTaskExecutionRoleC0B6A84D",
            "Arn",
          ],
        },
        "Family": "TestMainStack-backend",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "RuntimePlatform": {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "EcsTaskRole8DFA0181",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "BackendKinesisErrorAppLogStreamE8A5710E": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "LogGroupName": {
          "Ref": "BackendKinesisErrorLogGroupECF5A9CA",
        },
        "LogStreamName": "backend_kinesis_s3_delivery_app_error",
      },
      "Type": "AWS::Logs::LogStream",
      "UpdateReplacePolicy": "Delete",
    },
    "BackendKinesisErrorLogGroupECF5A9CA": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "LogGroupName": "/aws/kinesisfirehose/backend-error-logs",
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "BackendKinesisErrorWebLogStreamD04E97E6": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "LogGroupName": {
          "Ref": "BackendKinesisErrorLogGroupECF5A9CA",
        },
        "LogStreamName": "backend_kinesis_s3_delivery_web_error",
      },
      "Type": "AWS::Logs::LogStream",
      "UpdateReplacePolicy": "Delete",
    },
    "BackendLogRouterLogGroupE7282ADD": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "LogGroupName": "backend-logrouter-logs",
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "BackendScalableTargetB21B8CE0": {
      "Properties": {
        "MaxCapacity": 1,
        "MinCapacity": 1,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "service/",
              {
                "Ref": "EcsCluster97242B84",
              },
              "/",
              {
                "Fn::GetAtt": [
                  "BackendEcsService1ECD309F",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "BackendScalableTargetRole0A2C17B1",
            "Arn",
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "BackendScalableTargetRole0A2C17B1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "application-autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "BackendStepScaleOutPolicyUpperAlarmFEFDBC7C": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "BackendStepScaleOutPolicyUpperPolicy6F221DA1",
          },
        ],
        "AlarmDescription": "Upper threshold scaling alarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "EcsCluster97242B84",
            },
          },
          {
            "Name": "ServiceName",
            "Value": {
              "Fn::GetAtt": [
                "BackendEcsService1ECD309F",
                "Name",
              ],
            },
          },
        ],
        "EvaluationPeriods": 3,
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/ECS",
        "Period": 300,
        "Statistic": "Maximum",
        "Threshold": 80,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "BackendStepScaleOutPolicyUpperPolicy6F221DA1": {
      "Properties": {
        "PolicyName": "TestMainStackBackendStepScaleOutPolicyUpperPolicyA9054BB0",
        "PolicyType": "StepScaling",
        "ScalingTargetId": {
          "Ref": "BackendScalableTargetB21B8CE0",
        },
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "PercentChangeInCapacity",
          "Cooldown": 180,
          "MetricAggregationType": "Maximum",
          "StepAdjustments": [
            {
              "MetricIntervalLowerBound": 0,
              "ScalingAdjustment": 50,
            },
          ],
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "BackendWebLogDeliveryStream": {
      "Properties": {
        "DeliveryStreamEncryptionConfigurationInput": {
          "KeyType": "AWS_OWNED_CMK",
        },
        "DeliveryStreamName": "TestMainStack-backend-web-log",
        "DeliveryStreamType": "DirectPut",
        "S3DestinationConfiguration": {
          "BucketARN": {
            "Fn::GetAtt": [
              "LogsBucket9C4D8843",
              "Arn",
            ],
          },
          "CloudWatchLoggingOptions": {
            "Enabled": true,
            "LogGroupName": {
              "Ref": "BackendKinesisErrorLogGroupECF5A9CA",
            },
            "LogStreamName": {
              "Ref": "BackendKinesisErrorWebLogStreamD04E97E6",
            },
          },
          "CompressionFormat": "GZIP",
          "EncryptionConfiguration": {
            "KMSEncryptionConfig": {
              "AWSKMSKeyARN": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kms:ap-northeast-1:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab",
                  ],
                ],
              },
            },
          },
          "Prefix": "backend/web/",
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseRoleAA67C190",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "BastionHost30F9ED05": {
      "DependsOn": [
        "BastionHostInstanceRoleDefaultPolicy17347525",
        "BastionHostInstanceRoleDD3FA5F1",
      ],
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": {
          "Ref": "BastionHostInstanceProfile770FCA07",
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t2.nano",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "BastionHostInstanceSecurityGroupE75D4274",
              "GroupId",
            ],
          },
        ],
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BastionHost",
          },
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash
sudo dnf update -y
sudo dnf install -y postgresql16",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "BastionHostInstanceProfile770FCA07": {
      "Properties": {
        "Roles": [
          {
            "Ref": "BastionHostInstanceRoleDD3FA5F1",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "BastionHostInstanceRoleDD3FA5F1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BastionHost",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BastionHostInstanceRoleDefaultPolicy17347525": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssmmessages:*",
                "ssm:UpdateInstanceInformation",
                "ec2messages:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BastionHostInstanceRoleDefaultPolicy17347525",
        "Roles": [
          {
            "Ref": "BastionHostInstanceRoleDD3FA5F1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BastionHostInstanceSecurityGroupE75D4274": {
      "Properties": {
        "GroupDescription": "TestMainStack/BastionHost/Resource/InstanceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "BastionHost",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "CloudFrontAliasRecorddevs3ecswebservicehogeappclickA82F0C32": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "FrontendCloudFrontCloudFrontDistribution876417CC",
              "DomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::FindInMap": [
              "AWSCloudFrontPartitionHostedZoneIdMap",
              {
                "Ref": "AWS::Partition",
              },
              "zoneId",
            ],
          },
        },
        "HostedZoneId": "Z01140211URKT1J60WTA5",
        "Name": "dev.s3-ecs-web-service.hoge-app.click.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "CloudFrontAliasRecorddevs3ecswebservicekkstudyclickC6A4A217": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "FrontendCloudFrontCloudFrontDistribution876417CC",
              "DomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::FindInMap": [
              "AWSCloudFrontPartitionHostedZoneIdMap",
              {
                "Ref": "AWS::Partition",
              },
              "zoneId",
            ],
          },
        },
        "HostedZoneId": "Z10072973EOGDWG5ZALL3",
        "Name": "dev.s3-ecs-web-service.kk-study.click.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "CloudFrontAliasRecorddevs3ecswebservicesampleappclick81FD5AE5": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "FrontendCloudFrontCloudFrontDistribution876417CC",
              "DomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::FindInMap": [
              "AWSCloudFrontPartitionHostedZoneIdMap",
              {
                "Ref": "AWS::Partition",
              },
              "zoneId",
            ],
          },
        },
        "HostedZoneId": "Z0201048170ZNG2QS3LN1",
        "Name": "dev.s3-ecs-web-service.sample-app.click.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "CloudFrontLogsBucketAutoDeleteObjectsCustomResourceA0CDE445": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CloudFrontLogsBucketPolicy94332991",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "CloudFrontLogsBucketFE303C6F",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontLogsBucketFE303C6F": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 30,
              "Id": "cloudfront-logs-expiration",
              "Status": "Enabled",
            },
          ],
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontLogsBucketPolicy94332991": {
      "Properties": {
        "Bucket": {
          "Ref": "CloudFrontLogsBucketFE303C6F",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudFrontLogsBucketFE303C6F",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CloudFrontLogsBucketFE303C6F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudFrontLogsBucketFE303C6F",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CloudFrontLogsBucketFE303C6F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CustomCrossRegionExportReaderCustomResourceProviderHandler46647B68": {
      "DependsOn": [
        "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-ap-northeast-1",
          "S3Key": "d41c8e6342cd078b5ea5aec11522bdb605eae00f4bb98a3fb0b44c827e9b5ca9.zip",
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ssm:AddTagsToResource",
                    "ssm:RemoveTagsFromResource",
                    "ssm:GetParameters",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":ssm:ap-northeast-1:123456789012:parameter/cdk/exports/TestMainStack/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Inline",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-ap-northeast-1",
          "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "LogsBucket9C4D8843",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DmarcRecorddevs3ecswebservicehogeappclick9B24D1C1": {
      "Properties": {
        "HostedZoneId": "Z01140211URKT1J60WTA5",
        "Name": "_dmarc.dev.s3-ecs-web-service.hoge-app.click.",
        "ResourceRecords": [
          ""v=DMARC1; p=none; rua=mailto:aws-experiment@kokopelli-inc.com"",
        ],
        "TTL": "3600",
        "Type": "TXT",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "DmarcRecorddevs3ecswebservicekkstudyclick5C3AE16F": {
      "Properties": {
        "HostedZoneId": "Z10072973EOGDWG5ZALL3",
        "Name": "_dmarc.dev.s3-ecs-web-service.kk-study.click.",
        "ResourceRecords": [
          ""v=DMARC1; p=none; rua=mailto:aws-experiment@kokopelli-inc.com"",
        ],
        "TTL": "3600",
        "Type": "TXT",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "DmarcRecorddevs3ecswebservicesampleappclick0979C03C": {
      "Properties": {
        "HostedZoneId": "Z0201048170ZNG2QS3LN1",
        "Name": "_dmarc.dev.s3-ecs-web-service.sample-app.click.",
        "ResourceRecords": [
          ""v=DMARC1; p=none; rua=mailto:aws-experiment@kokopelli-inc.com"",
        ],
        "TTL": "3600",
        "Type": "TXT",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EcsCluster72B17558": {
      "Properties": {
        "CapacityProviders": [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": {
          "Ref": "EcsCluster97242B84",
        },
        "DefaultCapacityProviderStrategy": [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "EcsCluster97242B84": {
      "Properties": {
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "EcsTaskExecutionRoleC0B6A84D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
              ],
            ],
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ssm:GetParameters",
                    "secretsmanager:GetSecretValue",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":ssm:ap-northeast-1:123456789012:parameter/*",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":secretsmanager:ap-northeast-1:123456789012:secret/*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "taskExecutionPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "EcsTaskExecutionRoleDefaultPolicyDCEEFDC3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BackendEcrRepository00C0B380",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "AuroraSecret41E6E877",
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:ap-northeast-1:123456789012:parameter/TestMainStack/ecs-task-def/app/env-vars/app-key",
                  ],
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BackendLogRouterLogGroupE7282ADD",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:ap-northeast-1:123456789012:parameter/TestMainStack/ecs-task-def/log-router/env-vars/app-log-slack-webhook-url",
                  ],
                ],
              },
            },
            {
              "Action": [
                "rds-db:connect",
                "rds:DescribeDBInstances",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds:ap-northeast-1:123456789012:cluster:",
                    {
                      "Ref": "AuroraServerlessClusterB4A18EF1",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EcsTaskExecutionRoleDefaultPolicyDCEEFDC3",
        "Roles": [
          {
            "Ref": "EcsTaskExecutionRoleC0B6A84D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EcsTaskRole8DFA0181": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole",
              ],
            ],
          },
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "firehose:PutRecordBatch",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:firehose:ap-northeast-1:123456789012:deliverystream/",
                          {
                            "Ref": "BackendAppLogDeliveryStream",
                          },
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:firehose:ap-northeast-1:123456789012:deliverystream/",
                          {
                            "Ref": "BackendWebLogDeliveryStream",
                          },
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "firehosePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject",
                    "s3:ListBucket",
                    "s3:GetObjectAcl",
                    "s3:PutObjectAcl",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UploadedFilesBucket10DD2840",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "UploadedFilesBucket10DD2840",
                              "Arn",
                            ],
                          },
                          "/*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3UploadPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail",
                    "ses:SendTemplatedEmail",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "sesPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "EcsTaskRoleDefaultPolicy50882C77": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EcsTaskRoleDefaultPolicy50882C77",
        "Roles": [
          {
            "Ref": "EcsTaskRole8DFA0181",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EmailIdentitydevs3ecswebservicehogeappclick56E38291": {
      "Properties": {
        "EmailIdentity": "dev.s3-ecs-web-service.hoge-app.click",
        "MailFromAttributes": {
          "MailFromDomain": "bounce.dev.s3-ecs-web-service.hoge-app.click",
        },
      },
      "Type": "AWS::SES::EmailIdentity",
    },
    "EmailIdentitydevs3ecswebservicehogeappclickDkimDnsToken10345E8B4": {
      "Properties": {
        "HostedZoneId": "Z01140211URKT1J60WTA5",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicehogeappclick56E38291",
            "DkimDNSTokenName1",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicehogeappclick56E38291",
              "DkimDNSTokenValue1",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicehogeappclickDkimDnsToken2D3911BEF": {
      "Properties": {
        "HostedZoneId": "Z01140211URKT1J60WTA5",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicehogeappclick56E38291",
            "DkimDNSTokenName2",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicehogeappclick56E38291",
              "DkimDNSTokenValue2",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicehogeappclickDkimDnsToken361C9C79A": {
      "Properties": {
        "HostedZoneId": "Z01140211URKT1J60WTA5",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicehogeappclick56E38291",
            "DkimDNSTokenName3",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicehogeappclick56E38291",
              "DkimDNSTokenValue3",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicehogeappclickMailFromMxRecordDA530659": {
      "Properties": {
        "HostedZoneId": "Z01140211URKT1J60WTA5",
        "Name": "bounce.dev.s3-ecs-web-service.hoge-app.click.",
        "ResourceRecords": [
          "10 feedback-smtp.ap-northeast-1.amazonses.com",
        ],
        "TTL": "1800",
        "Type": "MX",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicehogeappclickMailFromTxtRecord7C30D27D": {
      "Properties": {
        "HostedZoneId": "Z01140211URKT1J60WTA5",
        "Name": "bounce.dev.s3-ecs-web-service.hoge-app.click.",
        "ResourceRecords": [
          ""v=spf1 include:amazonses.com ~all"",
        ],
        "TTL": "1800",
        "Type": "TXT",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicekkstudyclick1E68EA6F": {
      "Properties": {
        "EmailIdentity": "dev.s3-ecs-web-service.kk-study.click",
        "MailFromAttributes": {
          "MailFromDomain": "bounce.dev.s3-ecs-web-service.kk-study.click",
        },
      },
      "Type": "AWS::SES::EmailIdentity",
    },
    "EmailIdentitydevs3ecswebservicekkstudyclickDkimDnsToken1F46993E1": {
      "Properties": {
        "HostedZoneId": "Z10072973EOGDWG5ZALL3",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicekkstudyclick1E68EA6F",
            "DkimDNSTokenName1",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicekkstudyclick1E68EA6F",
              "DkimDNSTokenValue1",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicekkstudyclickDkimDnsToken2581D5FB9": {
      "Properties": {
        "HostedZoneId": "Z10072973EOGDWG5ZALL3",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicekkstudyclick1E68EA6F",
            "DkimDNSTokenName2",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicekkstudyclick1E68EA6F",
              "DkimDNSTokenValue2",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicekkstudyclickDkimDnsToken3D61D17AF": {
      "Properties": {
        "HostedZoneId": "Z10072973EOGDWG5ZALL3",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicekkstudyclick1E68EA6F",
            "DkimDNSTokenName3",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicekkstudyclick1E68EA6F",
              "DkimDNSTokenValue3",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicekkstudyclickMailFromMxRecord77F01841": {
      "Properties": {
        "HostedZoneId": "Z10072973EOGDWG5ZALL3",
        "Name": "bounce.dev.s3-ecs-web-service.kk-study.click.",
        "ResourceRecords": [
          "10 feedback-smtp.ap-northeast-1.amazonses.com",
        ],
        "TTL": "1800",
        "Type": "MX",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicekkstudyclickMailFromTxtRecord1C1A9E90": {
      "Properties": {
        "HostedZoneId": "Z10072973EOGDWG5ZALL3",
        "Name": "bounce.dev.s3-ecs-web-service.kk-study.click.",
        "ResourceRecords": [
          ""v=spf1 include:amazonses.com ~all"",
        ],
        "TTL": "1800",
        "Type": "TXT",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicesampleappclick6D9A612B": {
      "Properties": {
        "EmailIdentity": "dev.s3-ecs-web-service.sample-app.click",
        "MailFromAttributes": {
          "MailFromDomain": "bounce.dev.s3-ecs-web-service.sample-app.click",
        },
      },
      "Type": "AWS::SES::EmailIdentity",
    },
    "EmailIdentitydevs3ecswebservicesampleappclickDkimDnsToken1B49359CB": {
      "Properties": {
        "HostedZoneId": "Z0201048170ZNG2QS3LN1",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicesampleappclick6D9A612B",
            "DkimDNSTokenName1",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicesampleappclick6D9A612B",
              "DkimDNSTokenValue1",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicesampleappclickDkimDnsToken23B64DC2F": {
      "Properties": {
        "HostedZoneId": "Z0201048170ZNG2QS3LN1",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicesampleappclick6D9A612B",
            "DkimDNSTokenName2",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicesampleappclick6D9A612B",
              "DkimDNSTokenValue2",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicesampleappclickDkimDnsToken3A28F6635": {
      "Properties": {
        "HostedZoneId": "Z0201048170ZNG2QS3LN1",
        "Name": {
          "Fn::GetAtt": [
            "EmailIdentitydevs3ecswebservicesampleappclick6D9A612B",
            "DkimDNSTokenName3",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "EmailIdentitydevs3ecswebservicesampleappclick6D9A612B",
              "DkimDNSTokenValue3",
            ],
          },
        ],
        "TTL": "1800",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicesampleappclickMailFromMxRecord69C09040": {
      "Properties": {
        "HostedZoneId": "Z0201048170ZNG2QS3LN1",
        "Name": "bounce.dev.s3-ecs-web-service.sample-app.click.",
        "ResourceRecords": [
          "10 feedback-smtp.ap-northeast-1.amazonses.com",
        ],
        "TTL": "1800",
        "Type": "MX",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "EmailIdentitydevs3ecswebservicesampleappclickMailFromTxtRecord3CD5F2F6": {
      "Properties": {
        "HostedZoneId": "Z0201048170ZNG2QS3LN1",
        "Name": "bounce.dev.s3-ecs-web-service.sample-app.click.",
        "ResourceRecords": [
          ""v=spf1 include:amazonses.com ~all"",
        ],
        "TTL": "1800",
        "Type": "TXT",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "ExportsReader8B249524": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ReaderProps": {
          "imports": {
            "/cdk/exports/TestMainStack/TestGlobalStackuseast1FnGetAttCloudFrontWebACLArnF1D7A049": "{{resolve:ssm:/cdk/exports/TestMainStack/TestGlobalStackuseast1FnGetAttCloudFrontWebACLArnF1D7A049}}",
            "/cdk/exports/TestMainStack/TestGlobalStackuseast1RefCloudFrontCertificateA27ED7B2CCE1A2E7": "{{resolve:ssm:/cdk/exports/TestMainStack/TestGlobalStackuseast1RefCloudFrontCertificateA27ED7B2CCE1A2E7}}",
          },
          "prefix": "TestMainStack",
          "region": "ap-northeast-1",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCrossRegionExportReaderCustomResourceProviderHandler46647B68",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CrossRegionExportReader",
      "UpdateReplacePolicy": "Delete",
    },
    "FirehoseRoleAA67C190": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "FirehoseRoleDefaultPolicyF034DFF7": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "LogsBucket9C4D8843",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "LogsBucket9C4D8843",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BackendKinesisErrorLogGroupECF5A9CA",
                  "Arn",
                ],
              },
            },
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kms:ap-northeast-1:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab",
                  ],
                ],
              },
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kms:ap-northeast-1:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "FirehoseRoleDefaultPolicyF034DFF7",
        "Roles": [
          {
            "Ref": "FirehoseRoleAA67C190",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "FrontendBucketAutoDeleteObjectsCustomResourceDB860B32": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "FrontendBucketPolicy1DFF75D9",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "FrontendBucketEFE2E19C",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "FrontendBucketEFE2E19C": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "FrontendBucketPolicy1DFF75D9": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F16",
              "reason": "Public website bucket policy requires a wildcard principal",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "FrontendBucketEFE2E19C",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FrontendBucketEFE2E19C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FrontendBucketEFE2E19C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FrontendBucketEFE2E19C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FrontendBucketEFE2E19C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:GetObject",
              "Condition": {
                "StringEquals": {
                  "AWS:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":cloudfront::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":distribution/",
                        {
                          "Ref": "FrontendCloudFrontCloudFrontDistribution876417CC",
                        },
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudfront.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "FrontendBucketEFE2E19C",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "FrontendCachePolicy2756196C": {
      "Properties": {
        "CachePolicyConfig": {
          "Comment": "FrontendCachePolicy",
          "DefaultTTL": 86400,
          "MaxTTL": 31536000,
          "MinTTL": 0,
          "Name": "TestMainStack-FrontendCachePolicy",
          "ParametersInCacheKeyAndForwardedToOrigin": {
            "CookiesConfig": {
              "CookieBehavior": "none",
            },
            "EnableAcceptEncodingBrotli": true,
            "EnableAcceptEncodingGzip": true,
            "HeadersConfig": {
              "HeaderBehavior": "none",
            },
            "QueryStringsConfig": {
              "QueryStringBehavior": "none",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "FrontendCloudFrontCloudFrontDistribution876417CC": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            "dev.s3-ecs-web-service.sample-app.click",
            "dev.s3-ecs-web-service.hoge-app.click",
            "dev.s3-ecs-web-service.kk-study.click",
          ],
          "CustomErrorResponses": [
            {
              "ErrorCachingMinTTL": 0,
              "ErrorCode": 403,
              "ResponseCode": 200,
              "ResponsePagePath": "/",
            },
            {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 404,
              "ResponseCode": 404,
              "ResponsePagePath": "/404.html",
            },
          ],
          "DefaultCacheBehavior": {
            "CachePolicyId": {
              "Ref": "FrontendCachePolicy2756196C",
            },
            "Compress": true,
            "FunctionAssociations": [
              {
                "EventType": "viewer-request",
                "FunctionARN": {
                  "Fn::GetAtt": [
                    "FrontendIndexPageFunctionECF1D732",
                    "FunctionARN",
                  ],
                },
              },
              {
                "EventType": "viewer-response",
                "FunctionARN": {
                  "Fn::GetAtt": [
                    "FrontendHttpSecurityHeaderFunction2DD4B223",
                    "FunctionARN",
                  ],
                },
              },
            ],
            "OriginRequestPolicyId": {
              "Ref": "FrontendOriginRequestPolicyDA4BC051",
            },
            "TargetOriginId": "TestMainStackFrontendCloudFrontCloudFrontDistributionOrigin133DA2677",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2and3",
          "IPV6Enabled": true,
          "Logging": {
            "Bucket": {
              "Fn::GetAtt": [
                "CloudFrontLogsBucketFE303C6F",
                "RegionalDomainName",
              ],
            },
            "Prefix": "FrontendCloudFront/",
          },
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "FrontendBucketEFE2E19C",
                  "RegionalDomainName",
                ],
              },
              "Id": "TestMainStackFrontendCloudFrontCloudFrontDistributionOrigin133DA2677",
              "OriginAccessControlId": {
                "Fn::GetAtt": [
                  "FrontendCloudFrontCloudFrontOac67B033DB",
                  "Id",
                ],
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": "",
              },
            },
          ],
          "PriceClass": "PriceClass_200",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Fn::GetAtt": [
                "ExportsReader8B249524",
                "/cdk/exports/TestMainStack/TestGlobalStackuseast1RefCloudFrontCertificateA27ED7B2CCE1A2E7",
              ],
            },
            "MinimumProtocolVersion": "TLSv1.2_2021",
            "SslSupportMethod": "sni-only",
          },
          "WebACLId": {
            "Fn::GetAtt": [
              "ExportsReader8B249524",
              "/cdk/exports/TestMainStack/TestGlobalStackuseast1FnGetAttCloudFrontWebACLArnF1D7A049",
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "FrontendCloudFrontCloudFrontOac67B033DB": {
      "Properties": {
        "OriginAccessControlConfig": {
          "Description": "Origin access control provisioned by aws-cloudfront-s3",
          "Name": {
            "Fn::Join": [
              "",
              [
                "aws-cloudfront-s3-FronFront-",
                {
                  "Fn::Select": [
                    2,
                    {
                      "Fn::Split": [
                        "/",
                        {
                          "Ref": "AWS::StackId",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
          "OriginAccessControlOriginType": "s3",
          "SigningBehavior": "always",
          "SigningProtocol": "sigv4",
        },
      },
      "Type": "AWS::CloudFront::OriginAccessControl",
    },
    "FrontendCloudFrontSetHttpSecurityHeaders21C22C4A": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "function handler(event) { var response = event.response; var headers = response.headers; headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'}; headers['content-security-policy'] = { value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"}; headers['x-content-type-options'] = { value: 'nosniff'}; headers['x-frame-options'] = {value: 'DENY'}; headers['x-xss-protection'] = {value: '1; mode=block'}; return response; }",
        "FunctionConfig": {
          "Comment": "SetHttpSecurityHeadersc80c0d68dbbfc7f66a0e65d5a474b01e945bdf42b8",
          "Runtime": "cloudfront-js-1.0",
        },
        "Name": "SetHttpSecurityHeadersc80c0d68dbbfc7f66a0e65d5a474b01e945bdf42b8",
      },
      "Type": "AWS::CloudFront::Function",
    },
    "FrontendHttpSecurityHeaderFunction2DD4B223": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "function handler(event) {
  const response = event.response;
  const headers = response.headers;
  headers["strict-transport-security"] = {
    value: "max-age=63072000; includeSubdomains; preload",
  };
  headers["content-security-policy"] = {
    value:
      "default-src 'self' https:; " +
      "script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; " +
      "style-src 'self' 'unsafe-inline' https:; " +
      "font-src 'self' data: https:; " +
      "img-src 'self' data: https:; " +
      "media-src 'self' https:; " +
      "connect-src 'self' https:; " +
      "frame-src 'self' https:; " +
      "frame-ancestors 'none'; " +
      "object-src 'none';",
  };
  headers["x-content-type-options"] = { value: "nosniff" };
  headers["x-frame-options"] = { value: "DENY" };
  headers["x-xss-protection"] = { value: "1; mode=block" };
  return response;
}
",
        "FunctionConfig": {
          "Comment": "TestMainStack-FrontendHttpSecurityHeaderFunction",
          "Runtime": "cloudfront-js-2.0",
        },
        "Name": "TestMainStack-FrontendHttpSecurityHeaderFunction",
      },
      "Type": "AWS::CloudFront::Function",
    },
    "FrontendIndexPageFunctionECF1D732": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "function handler(event) {
  const request = event.request;
  const uri = request.uri;

  // index.htmlへのリクエストを同じディレクトリの親パスにリダイレクト
  if (uri.endsWith("/index.html")) {
    // パスの末尾の "index.html" を除外してリダイレクト先を決定
    const redirectUri = uri.replace("/index.html", "/");
    return {
      statusCode: 301,
      headers: {
        location: {
          value: redirectUri,
        },
      },
    };
  }

  // URIにファイル名がない場合
  if (uri.endsWith("/")) {
    request.uri += "index.html";
  }
  // URIに拡張子がない場合
  else if (!uri.includes(".")) {
    request.uri += "/index.html";
  }

  return request;
}
",
        "FunctionConfig": {
          "Comment": "TestMainStack-FrontendIndexPageFunction",
          "Runtime": "cloudfront-js-2.0",
        },
        "Name": "TestMainStack-FrontendIndexPageFunction",
      },
      "Type": "AWS::CloudFront::Function",
    },
    "FrontendOriginRequestPolicyDA4BC051": {
      "Properties": {
        "OriginRequestPolicyConfig": {
          "Comment": "FrontendOriginRequestPolicy",
          "CookiesConfig": {
            "CookieBehavior": "none",
          },
          "HeadersConfig": {
            "HeaderBehavior": "none",
          },
          "Name": "TestMainStack-FrontendOriginRequestPolicy",
          "QueryStringsConfig": {
            "QueryStringBehavior": "none",
          },
        },
      },
      "Type": "AWS::CloudFront::OriginRequestPolicy",
    },
    "GitHubActionsRole4F1BBA26": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "token.actions.githubusercontent.com:sub": "repo:ngsw877/aws-infrastructure:*",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Fn::ImportValue": "GitHubActionsOidcProviderArn",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecs:ListServices",
                    "sts:GetCallerIdentity",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "cloudformation:DescribeStacks",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":cloudformation:ap-northeast-1:123456789012:stack/TestMainStack/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:CompleteLayerUpload",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::GetAtt": [
                      "BackendEcrRepository00C0B380",
                      "Arn",
                    ],
                  },
                },
                {
                  "Action": "ecs:DescribeClusters",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::GetAtt": [
                      "EcsCluster97242B84",
                      "Arn",
                    ],
                  },
                },
                {
                  "Action": "ecs:UpdateService",
                  "Effect": "Allow",
                  "Resource": {
                    "Ref": "BackendEcsService1ECD309F",
                  },
                },
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:DeleteObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "FrontendBucketEFE2E19C",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "FrontendBucketEFE2E19C",
                              "Arn",
                            ],
                          },
                          "/*",
                        ],
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "cloudfront:CreateInvalidation",
                    "cloudfront:GetInvalidation",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":cloudfront::123456789012:distribution/",
                        {
                          "Ref": "FrontendCloudFrontCloudFrontDistribution876417CC",
                        },
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ecs:RunTask",
                    "ecs:DescribeTasks",
                    "ecs:ListTasks",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":ecs:ap-northeast-1:123456789012:task-definition/TestMainStack-backend*",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":ecs:ap-northeast-1:123456789012:task/",
                          {
                            "Ref": "EcsCluster97242B84",
                          },
                          "/*",
                        ],
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "ecs:DescribeTaskDefinition",
                    "ecs:RegisterTaskDefinition",
                    "ecs:DeregisterTaskDefinition",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "iam:PassRole",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "EcsTaskRole8DFA0181",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "EcsTaskExecutionRoleC0B6A84D",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "GitHubActionsPolicy",
          },
        ],
        "RoleName": "TestMainStack-GitHubActionsRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-ap-northeast-1",
          "S3Key": "2819175352ad1ce0dae768e83fc328fb70fb5f10b4a8ff0ccbcb791f02b0716d.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LogsBucket9C4D8843": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "Private",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 30,
              "Id": "log-expiration",
              "Status": "Enabled",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "LogsBucketAutoDeleteObjectsCustomResource7D54FB85": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "LogsBucketPolicyD70D9252",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "LogsBucket9C4D8843",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "LogsBucketPolicyD70D9252": {
      "Properties": {
        "Bucket": {
          "Ref": "LogsBucket9C4D8843",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "LogsBucket9C4D8843",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "LogsBucket9C4D8843",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "LogsBucket9C4D8843",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "LogsBucket9C4D8843",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::582318560864:root",
                    ],
                  ],
                },
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "LogsBucket9C4D8843",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/123456789012/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "LogsBucket9C4D8843",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/123456789012/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "LogsBucket9C4D8843",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "ParameterGroup5E32DECB": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": "Cluster parameter group for aurora-postgresql16",
        "Family": "aurora-postgresql16",
        "Parameters": {},
      },
      "Type": "AWS::RDS::DBClusterParameterGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "SlackChatbotRole72458F50": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "chatbot.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "cloudwatch:Describe*",
                    "cloudwatch:Get*",
                    "cloudwatch:List*",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SlackNotificationChatBotPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StepScalingInBackendPolicyLowerAlarmF805B729": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "StepScalingInBackendPolicyLowerPolicy370A26B0",
          },
        ],
        "AlarmDescription": "Lower threshold scaling alarm",
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "EcsCluster97242B84",
            },
          },
          {
            "Name": "ServiceName",
            "Value": {
              "Fn::GetAtt": [
                "BackendEcsService1ECD309F",
                "Name",
              ],
            },
          },
        ],
        "EvaluationPeriods": 3,
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/ECS",
        "Period": 300,
        "Statistic": "Maximum",
        "Threshold": 60,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "StepScalingInBackendPolicyLowerPolicy370A26B0": {
      "Properties": {
        "PolicyName": "TestMainStackStepScalingInBackendPolicyLowerPolicyADF9B610",
        "PolicyType": "StepScaling",
        "ScalingTargetId": {
          "Ref": "BackendScalableTargetB21B8CE0",
        },
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "PercentChangeInCapacity",
          "Cooldown": 300,
          "MetricAggregationType": "Maximum",
          "StepAdjustments": [
            {
              "MetricIntervalUpperBound": 0,
              "ScalingAdjustment": -20,
            },
          ],
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "SubnetGroup": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for Aurora database",
        "SubnetIds": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
          {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "UploadedFilesBucket10DD2840": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*",
              ],
              "AllowedMethods": [
                "GET",
              ],
              "AllowedOrigins": [
                "https://dev.s3-ecs-web-service.sample-app.click",
                "https://dev.s3-ecs-web-service.hoge-app.click",
                "https://dev.s3-ecs-web-service.kk-study.click",
              ],
              "MaxAge": 3600,
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "UploadedFilesBucketAutoDeleteObjectsCustomResource40510196": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "UploadedFilesBucketPolicy7D37880D",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "UploadedFilesBucket10DD2840",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "UploadedFilesBucketPolicy7D37880D": {
      "Properties": {
        "Bucket": {
          "Ref": "UploadedFilesBucket10DD2840",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UploadedFilesBucket10DD2840",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "UploadedFilesBucket10DD2840",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UploadedFilesBucket10DD2840",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "UploadedFilesBucket10DD2840",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Vpc8378EB38": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet1Subnet536B997A": {
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet2RouteTableA678073B": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet2Subnet3788AAA1": {
      "Properties": {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet1EIPD7E02669": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet1NATGateway4D7517AA": {
      "DependsOn": [
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet1RouteTableAssociation97140677",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet1RouteTable6C95E38E": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet1Subnet5C2D37C4": {
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet2DefaultRoute97F91067": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet2RouteTable94F7E489": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet2Subnet691E08A3": {
      "Properties": {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "TestMainStack/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcVPCGWBF912B6E": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "WarningSlackChannelConfigDCDEDC97": {
      "Properties": {
        "ConfigurationName": "TestMainStack-TestMainStack",
        "GuardrailPolicies": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/ReadOnlyAccess",
              ],
            ],
          },
        ],
        "IamRoleArn": {
          "Fn::GetAtt": [
            "SlackChatbotRole72458F50",
            "Arn",
          ],
        },
        "LoggingLevel": "ERROR",
        "SlackChannelId": "C07KT5VSJMD",
        "SlackWorkspaceId": "T016Z1RG1QT",
        "SnsTopicArns": [
          {
            "Ref": "WarningSnsTopic281129C7",
          },
        ],
      },
      "Type": "AWS::Chatbot::SlackChannelConfiguration",
    },
    "WarningSnsTopic281129C7": {
      "Type": "AWS::SNS::Topic",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
  "Transform": "AWS::Serverless-2016-10-31",
}
`;
