AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EnvName:
    Type: String
    Default: sample-fargate
  WebAppEcsTaskCpu:
    Type: Number
    Default: 1024
  WebAppEcsTaskMemory:
    Type: Number
    Default: 2048
  AppWebAppDockerImageTag:
    Type: String
    Default: "app"
  AppEnv:
    Type: String
  AppDebug:
    Type: String
  WebAppDockerImageTag:
    Type: String
    Default: "web"
  VpcStackName:
    Type: String
    Default: "common-vpc"
  SecurityGroupStackName:
    Type: String
    Default: "common-sg"
  EcrStackName:
    Type: String
    Default: "common-ecr"
  AcmStackName:
    Type: String
    Default: "common-acm-for-alb"
  WebAppTaskDesiredCount:
    Type: Number
    Default: 1
  GitHubRepositoryName:
    Type: String
    Default: "ngsw877/aws-infrastructur"
  ElbSecurityPolicy:
    Type: String
    Default: "ELBSecurityPolicy-TLS13-1-2-2021-06"

Resources:
  # ECSタスクロール
  WebAppEcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole
      RoleName: !Sub "${AWS::StackName}-WebAppEcsTaskRole"

  # ECS タスク実行ロール
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # ECSクラスター
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  # ECSタスク: Web (WebApp)
  WebAppEcsTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-web-app"
      TaskRoleArn: !Ref WebAppEcsTaskRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Cpu: !Ref WebAppEcsTaskCpu
      Memory: !Ref WebAppEcsTaskMemory
      ContainerDefinitions:
        # appコンテナ
        - Name: app
          Image:
            Fn::Join:
              - ""
              - - !Ref AWS::AccountId
                - !Sub ".dkr.ecr.${AWS::Region}.amazonaws.com/"
                - Fn::ImportValue:
                    !Sub "${EcrStackName}-EcrRepositoryName"
                - ":"
                - !Ref AppWebAppDockerImageTag
          PortMappings:
            - { ContainerPort: 9000, HostPort: 9000 }
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs/${EnvName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: docker
          Environment:
            - Name: APP_ENV
              Value: !Ref AppEnv
            - Name: APP_DEBUG
              Value: !Ref AppDebug
            - Name: TZ
              Value: "Asia/Tokyo"
          ReadonlyRootFilesystem: false

        # webコンテナ
        - Name: web
          Image:
            Fn::Join:
              - ""
              - - !Ref AWS::AccountId
                - !Sub ".dkr.ecr.${AWS::Region}.amazonaws.com/"
                - Fn::ImportValue:
                    !Sub "${EcrStackName}-EcrRepositoryName"
                - ":"
                - !Ref WebAppDockerImageTag
          PortMappings:
            - { ContainerPort: 80, HostPort: 80 }
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs/${EnvName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: docker

  # CloudWatch Logsロググループ
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/ecs/${EnvName}"
      RetentionInDays: 7

  # ECSサービス
  WebAppEcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - WebAppHttpsProdListener # ターゲットグループがリスナーへ登録される前にWebAppEcsServiceを作成しようとすると、ターゲットグループがALBに紐付けられていないエラーになる
      - ApplicationLogGroup
    Properties:
      DeploymentController:
        Type: "CODE_DEPLOY"
      Cluster: !Ref EcsCluster
      DesiredCount: !Ref WebAppTaskDesiredCount
      TaskDefinition: !Ref WebAppEcsTask
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web # タスク定義のContainerDefinitions.Name
          ContainerPort: 80
          TargetGroupArn: !Ref WebAppTaskBlueTargetGroup
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetAz1"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetAz2"
          SecurityGroups:
            - Fn::ImportValue:
                !Sub "${SecurityGroupStackName}-WebAppSecurityGroup"

  #======================
  # CodeDeploy
  #======================
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${AWS::StackName}-blue-green-application"
      ComputePlatform: "ECS"

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - CodeDeployApplication
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "${CodeDeployApplication}-dg"
      DeploymentConfigName: "CodeDeployDefault.ECSAllAtOnce"
      AutoRollbackConfiguration:
        Enabled: "true"
        Events:
          - "DEPLOYMENT_FAILURE"
          - "DEPLOYMENT_STOP_ON_REQUEST"
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: "STOP_DEPLOYMENT"
          WaitTimeInMinutes: "1440"
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: "TERMINATE"
          TerminationWaitTimeInMinutes: "60"
      DeploymentStyle:
        DeploymentOption: "WITH_TRAFFIC_CONTROL"
        DeploymentType: "BLUE_GREEN"
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !Ref WebAppHttpsProdListener
            TestTrafficRoute:
              ListenerArns:
                - !Ref WebAppHttpsTestListener
            TargetGroups:
              - Name: !GetAtt WebAppTaskBlueTargetGroup.TargetGroupName
              - Name: !GetAtt WebAppTaskGreenTargetGroup.TargetGroupName
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      ECSServices:
        - ClusterName: !Ref EcsCluster
          ServiceName: !GetAtt WebAppEcsService.Name

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-CodeDeployRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codedeploy.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"

  #======================
  # ターゲットグループ
  #======================
  WebAppTaskBlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-blue-tg"
      Protocol: HTTP
      Port: 80
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - { Key: "deregistration_delay.timeout_seconds", Value: "10" }
      TargetType: ip

  WebAppTaskGreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-green-tg"
      Protocol: HTTP
      Port: 80
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - { Key: "deregistration_delay.timeout_seconds", Value: "10" }
      TargetType: ip

  #======================
  # ALB
  #======================
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PublicSubnetAz1"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PublicSubnetAz2"
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${SecurityGroupStackName}-LoadBalancerSecurityGroup"
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"

  WebAppHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  WebAppHttpsProdListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref ElbSecurityPolicy
      Certificates:
        - CertificateArn: !ImportValue
            'Fn::Sub': "${AcmStackName}-CertificateArn"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTaskBlueTargetGroup

  WebAppHttpsTestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: !ImportValue
        'Fn::Sub': "${SecurityGroupStackName}-TestListenerPort"
      Protocol: HTTPS
      SslPolicy: !Ref ElbSecurityPolicy
      Certificates:
        - CertificateArn: !ImportValue
            'Fn::Sub': "${AcmStackName}-CertificateArn"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTaskGreenTargetGroup

  WebAppHttpsDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      HostedZoneId: !ImportValue
        'Fn::Sub': "${AcmStackName}-HostedZoneId"
      Name: !ImportValue
        'Fn::Sub': "${AcmStackName}-Fqdn"
      AliasTarget:
        HostedZoneId: !GetAtt WebAppLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt WebAppLoadBalancer.DNSName

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: EIP
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-PublicSubnetAz1"

  # NAT Gateway用の固定IPアドレス
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway用のルーティングをプライベートサブネットのルートテーブルに追加する
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId:
        !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # プライベートサブネット用ルートテーブル
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateSubnetAz1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-PrivateSubnetAz1"

  PrivateSubnetAz2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          !Sub  "${VpcStackName}-PrivateSubnetAz2"

  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-GitHubActionsRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: !ImportValue GitHubActionsOidcProviderArn
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: "sts.amazonaws.com"
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub "repo:${GitHubRepositoryName}:*"

  GitHubActionsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-GitHubActionsPolicy"
      Roles:
        - !Ref GitHubActionsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecs:ListServices"
              - "ecs:RegisterTaskDefinition"
              - "sts:GetCallerIdentity"
            Resource: "*"
          - Effect: Allow
            Action:
              - "ecs:DescribeServices"
              - "codedeploy:GetDeploymentGroup"
              - "codedeploy:CreateDeployment"
              - "codedeploy:GetDeployment"
              - "codedeploy:GetDeploymentConfig"
              - "codedeploy:RegisterApplicationRevision"
              - "codedeploy:GetApplicationRevision"
            Resource:
              - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${EcsCluster}/${WebAppEcsService.Name}"
              - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${CodeDeployApplication}/${CodeDeployDeploymentGroup}"
              - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*"
              - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${CodeDeployApplication}"
          - Effect: Allow
            Action:
              - "cloudformation:DescribeStacks"
              - "cloudformation:DescribeStackResources"
            Resource: !Sub "arn:aws:cloudformation:*:*:stack/${AWS::StackName}/*"
          - Effect: Allow
            Action:
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:BatchGetImage"
              - "ecr:CompleteLayerUpload"
              - "ecr:InitiateLayerUpload"
              - "ecr:PutImage"
              - "ecr:UploadLayerPart"
            Resource:
              - Fn::ImportValue:
                  !Sub "${EcrStackName}-EcrRepositoryArn"
          - Effect: Allow
            Action:
              - "ecs:DescribeClusters"
            Resource:
              - !GetAtt EcsCluster.Arn
          - Effect: Allow
            Action:
              - "ecs:UpdateService"
            Resource: !Ref WebAppEcsService

