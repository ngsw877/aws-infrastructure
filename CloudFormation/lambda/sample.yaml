AWSTemplateFormatVersion: "2010-09-09"

Description: Template for Lambda Sample.

Parameters:
  EnvName:
    Description: Name of an environment. 'dev', 'staging', 'prod' and any name.
    Type: String
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
    Default: dev

  LambdaHandlerPath:
    Description: Path of a Lambda Handler.
    Type: String
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
    Default: index.handler

  RetentionDays:
    Description: Number of days to retain logs in CloudWatch.
    Type: Number
    Default: 14
    MinValue: 1
    MaxValue: 365

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
      Path: /

  LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      guard:
        SuppressedRules:
          - LAMBDA_INSIDE_VPC
          - LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED
    Properties:
      FunctionName: !Sub lambda-function-${EnvName}
      Description: LambdaFunction using python3.12.
      Runtime: python3.12
      Code:
        ZipFile: |
          import json
          import os
          from datetime import datetime

          def handler(event, context):
              env = os.environ.get('ENV')

              # 現在のUTC時間を取得
              current_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')

              # 環境変数に基づいてメッセージを変更
              if env == 'production':
                  message = 'Hello from the production environment!'
              else:
                  message = 'Hello from a non-production environment!'

              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': message,
                      'current_time': current_time
                  })
              }
      Handler: !Ref LambdaHandlerPath
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ENV: !Ref EnvName

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunction}
      RetentionInDays: !Ref RetentionDays

Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution.
    Value: !GetAtt LambdaRole.Arn
    Export:
      Name: LambdaRole

  LambdaFunctionName:
    Value: !Ref LambdaFunction

  LambdaFunctionARN:
    Description: Lambda function ARN.
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub LambdaARN-${EnvName}
