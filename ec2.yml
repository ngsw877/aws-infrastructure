AWSTemplateFormatVersion: "2010-09-09"

Description: Create EC2 Instance

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    ConstraintDescription: must be a valid EC2 instance type

  ImageId:
    Description: Id of AMI
    Type: String
    Default: ami-0218d08a1f9dac831 # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type (64bit x86) / ap-northeast-1
    ConstraintDescription: must be a valid image id

  KeyName:
    Description : Name of an existing EC2 KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription : Can contain only ASCII characters.

  CidrIpForSSH:
    Description: IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  CidrIpForHTTP:
    Description: IP address range that can be used to HTTP to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  CidrIpForHTTPS:
    Description: IP address range that can be used to HTTPS to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8
      NetworkInterfaces:
        - SubnetId: !ImportValue MyPublicSubnet1a
          GroupSet:
            - !GetAtt "SecurityGroupForWebServer.GroupId"
          AssociatePublicIpAddress: true
          DeviceIndex : 0
      KeyName: !Ref KeyName
      UserData: !Base64 |
        #!/bin/bash

        echo -e "===== yum update -y =====\n"
        yum update -y

        echo -e "===== amazon-linux-extras install nginx1.12 -y =====\n"
        amazon-linux-extras install nginx1.12 -y

        # 初期設定ファイルをバックアップ
        echo -e "===== cp -a /etc/nginx/nginx.conf /etc/nginx/nginx.conf.back =====\n"
        cp -a /etc/nginx/nginx.conf /etc/nginx/nginx.conf.back

        echo -e "===== systemctl start nginx =====\n"
        systemctl start nginx

        echo -e "===== systemctl enable nginx =====\n"
        systemctl systemctl enable nginx
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  SecurityGroupForWebServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName} Security Group
      VpcId: !ImportValue MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrIpForHTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrIpForHTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CidrIpForHTTPS
      Tags:
        - Key: Name
          Value: !Sub sg-for-${AWS::StackName}

Outputs:
  StackSecurityGroupForWebServer:
    Description: Id of the SecurityGroupForWebServer
    Value: !Ref SecurityGroupForWebServer
    Export:
      Name: MySecurityGroupForWebServer